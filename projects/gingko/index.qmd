---
title: "Gingko Forecasting Project"
format: html
author: "Drew Villeneuve"
---

This page contains data and scripts for QMEL forecasting of the UNH Gingko drop date!

As of 09/16/2025, this is not organized from the last time Drew played around with the gingko data.

## Gingko Leaf Drop Data

Dr. Seria Frey (UNH NRES) has been [continuing data collection](https://www.nhpr.org/environment/2023-11-17/this-year-a-ginkgo-tree-at-the-university-of-new-hampshire-lost-its-leaves-later-than-ever) of the UNH Gingko tree leaf drop date, a dataset that has been collected more or less continuously since 1977. 

```{r, echo=F,message=F,warning=F}
readRenviron(".Renviron")

library(fpp3)
library(openmeteo)
library(fabletools)
library(here)
library(tidyverse)
library(leaflet)

gingko_dat<-read.csv("data/gingko.csv")
          


gingko<-tsibble(gingko_dat,index=Year)
gingko<-tsibble::fill_gaps(gingko)

#plot
gingko |>
  autoplot(Julian.day) +
  labs(y="Julian Day",x="Year")+
  stat_smooth(method="lm") +
  geom_point()

gingko |>
  gg_lag(Julian.day,geom="point")

gingko |>
  ACF(Julian.day,lag_max = 47) |>
  autoplot()

```

# Let's get temp, precip, and wind speed data with openmeteo

The openmeteo package uses an API to query the Open Meteo dataset, with reanalysis data from ERA downscaled models. Therefore, important to note that these are MODELED data, not OBSERVATIONS. 

```{r,message=F,eval=T,warning=F,echo=F}

gingko_coords<-c(43.136806, -70.934278)
#unsilence to create nh_hist_day from scratch

#insert interactive map with photo of gingko, gingko.png
leaflet() %>%
  addTiles() %>%
  addMarkers(lng=-70.934278,lat=43.136806,popup=
               paste0("<img src='https://npr.brightspotcdn.com/dims4/default/9e3bfd4/2147483647/strip/true/crop/1488x1116+0+0/resize/1760x1320!/format/webp/quality/90/?url=http%3A%2F%2Fnpr-brightspot.s3.amazonaws.com%2Fe6%2F3a%2F3b3e8a6c42c8818ef0b91846a787%2Fginkgo-tree-and-leaves-on-ground-2.png' width='150' height='150'><br>",
                      "UNH Gingko Tree"))
```

From Openmeteo, we will extract 1) Minimum daily temperature at 2m, 2) Maximum daily temperature at 2m, 3) Daily precipitation, 4) Maximum daily windspeed at 10m,  5) sunrise and sunset,  6) Soil temperature from 0-7cm depth (hourly), and 7) Soil temperature from 28-100cm depth (hourly). We could get hourly temperature and precip, for example, if we think that accumulation is more important than threshold values There are many other variables available, see the [Open Meteo documentation](https://open-meteo.com/en/docs) for more information.

```{r,message=F,eval=F,warning=F,echo=F}

nh_hist_hourly<-weather_history(gingko_coords,start="1977-01-01",end="2024-12-01",
                hourly=c("soil_temperature_0_to_7cm","soil_temperature_28_to_100cm"))

#get daily summaries of soil temp
nh_hist_daily_soil_sum<-nh_hist_hourly%>%
  mutate(date = as.Date(datetime)) %>% 
  group_by(date)%>%
  summarise(shallow_soil_daily_mean=mean(hourly_soil_temperature_0_to_7cm),
            deep_soil_daily_mean=mean(hourly_soil_temperature_28_to_100cm))%>%
  ungroup()

nh_hist_day<-weather_history(gingko_coords,start="1977-01-01",end="2024-12-01",
               daily=c("temperature_2m_min","temperature_2m_max","precipitation_sum","windspeed_10m_max","sunrise","sunset"))

nh_hist<-left_join(nh_hist_day,nh_hist_daily_soil_sum,by="date")

write.csv(nh_hist_day,"data/nh_hist_day.csv")
write.csv(nh_hist_daily_soil_sum,"data/nh_hist_daily_soil_sum.csv")
write.csv(nh_hist,"data/nh_hist.csv")

```

```{r,echo=F,warning=F}
#read in daily 
nh_hist<-read.csv("data/nh_hist.csv")
nh_hist$date<-as.Date(nh_hist$date)
nh_hist$daily_sunrise<-as.POSIXct(nh_hist$daily_sunrise,format="%Y-%m-%dT%H:%M",tz="UTC")
nh_hist$daily_sunset<-as.POSIXct(nh_hist$daily_sunset,format="%Y-%m-%dT%H:%M",tz="UTC")

nh_hist<-na.omit(nh_hist)
nh_hist<-nh_hist|>select(-X)|>tsibble(index=date)

#quick examination of ACF plots
nh_hist |>
  ACF(daily_precipitation_sum ,lag_max = 365) |>
  autoplot()

nh_hist |>
  ACF(daily_windspeed_10m_max ,lag_max = 365) |>
  autoplot()

#let's examine all the temperatures!

ggplot(data=nh_hist,aes(x=date))+
  geom_line(aes(y=daily_temperature_2m_min,color="Min Air Temp at 2m"))+
  geom_line(aes(y=daily_temperature_2m_max,color="Max Air Temp at 2m"))+
  geom_line(aes(y=shallow_soil_daily_mean,color="Shallow Soil Temp (0-7cm)"))+
  geom_line(aes(y=deep_soil_daily_mean,color="Deep Soil Temp (28-100cm)"))+
  labs(y="Temperature (째C)",color="ERA5 Temperature Variables")
```
Cool, but how much can we trust these downscaled modeled data? Let's compare to NOAA weather station data from Durham, NH [(GHCND: USC00272174)](https://www.ncei.noaa.gov/access/past-weather/Durham%2C%20NH). The `rnoaa` package is sadly defunct, so for ease just download. 

Once that is read in, we will calculate the day of first frost (0째C) and first day below of 25째F (-3.89째C) from August 1st each year, and compare to the gingko leaf drop date.

```{r,echo=F,warning=F,message=F}
#now get weather station data
noaa_hist<-read.csv("data/noaa_hist.csv")
noaa_hist$date<-as.Date(noaa_hist$date,format="%m/%d/%Y")
noaa_hist<-na.omit(noaa_hist)

noaa_hist<-noaa_hist|>tsibble(index=date)

#get first frost dates
dates<-unique(gingko$Year)


noaa_hist<-read.csv("data/noaa_hist.csv")
noaa_hist$date<-as.Date(noaa_hist$date,format="%m/%d/%Y")
noaa_hist<-na.omit(noaa_hist)

noaa_hist<-noaa_hist|>tsibble(index=date)

#get first frost dates
dates<-unique(gingko$Year)


for (i in 1:length(dates)){
#first stop, weather station data
  dates_i_noaa<-noaa_hist|>
    dplyr::filter(year(date)==dates[i]) |>
    dplyr::filter(date>as.Date(paste0(dates[i],"-08-01")))
  
  first_frost_noaa<-dates_i_noaa |>
    dplyr::filter(temp_min <=0) |>
    pull(date) |>
    first()
  
  first_frost_julian_noaa<-julian(first_frost_noaa,origin=as.Date(paste0(dates[i],"-01-01")))
  
  first_deep_freeze_noaa<-dates_i_noaa |>
    dplyr::filter(temp_min <=-3.89) |>
    pull(date) |>
    first()
    
  first_deep_freeze_julian_noaa<-julian(first_frost_noaa,origin=as.Date(paste0(dates[i],"-01-01")))

#next stop, openmeteo
  dates_i_openmeteo<-nh_hist|>
    dplyr::filter(year(date)==dates[i]) |>
    dplyr::filter(date>as.Date(paste0(dates[i],"-08-01")))
  
  first_frost_openmeteo<-dates_i_openmeteo |>
    dplyr::filter(daily_temperature_2m_min <=0) |>
    pull(date) |>
    first()
  
  first_frost_julian_openmeteo<-julian(first_frost_openmeteo,origin=as.Date(paste0(dates[i],"-01-01")))
  
  first_deep_freeze_openmeteo<-dates_i_openmeteo |>
    dplyr::filter(daily_temperature_2m_min <=-3.89) |>
    pull(date) |>
    first()
    
  first_deep_freeze_julian_openmeteo<-julian(first_deep_freeze_openmeteo,origin=as.Date(paste0(dates[i],"-01-01")))
  
  gingko[i,3]<-first_frost_noaa
  gingko[i,4]<-first_frost_julian_noaa
  gingko[i,5]<-first_deep_freeze_noaa
  gingko[i,6]<-first_deep_freeze_julian_noaa
  gingko[i,7]<-first_frost_openmeteo
  gingko[i,8]<-first_frost_julian_openmeteo
  gingko[i,9]<-first_deep_freeze_openmeteo
  gingko[i,10]<-first_deep_freeze_julian_openmeteo 
  
}




gingko<-gingko|>
  rename("first_frost_noaa"="...3","first_frost_julian_noaa"="...4","first_deep_freeze_noaa"="...5",
         "first_deep_freeze_julian_noaa"="...6",
         "first_frost_openmeteo"="...7","first_frost_julian_openmeteo"="...8","first_deep_freeze_openmeteo"="...9",
         "first_deep_freeze_julian_openmeteo"="...10")
```

## Meteo Data Exploration

A quick investigation into whether ERA5/Openmeteo data and weather station data are correlated, and if there is a link with leaf drop date

```{r,echo=F,warning=F,message=F}

gingko_firstfrost<-gingko|>
  pivot_longer(cols=starts_with("first_deep_freeze_julian"),
               names_to="data_source",
               values_to="julian_frost")

ggplot(data=gingko_firstfrost,aes(x=julian_frost,y=Julian.day,color=data_source))+
  geom_point()+
  geom_abline(slope=1,intercept=0,linetype="dashed")+labs(x="Frost Julian Day",y="Gingko Leaf Drop Julian Day",color="Data Source")

ggplot()+
  geom_line(data=gingko_firstfrost,aes(x=Year,y=Julian.day),color="black")+
  stat_smooth(data=gingko_firstfrost,aes(x=Year,y=Julian.day),method="lm",color="black")+
  geom_line(data=gingko_firstfrost,aes(x=Year,y=julian_frost,color=data_source))+
  stat_smooth(data=gingko_firstfrost,aes(x=Year,y=julian_frost,color=data_source),method="lm")

```

## WIP - ERA5 Data Extraction with mcera5 

```{r,message=F,eval=F}


#######################
#era5
library(mcera5,attach.required=T)
library(ecmwfr)
library(microclima)
library(NicheMapR)
library(devtools)
library(tidyverse)
library(ncdf4)
library(curl)
library(keyring)
library(abind)
library(lubridate)
library(tidync)

#my tokens are secret - you will need to get your own, see vignette for mcera5
vignette("mcera5_vignette", package = "mcera5")
uid <- Sys.getenv("uid")
cds_access_token <- Sys.getenv("cds_access_token")


ecmwfr::wf_set_key(user = uid,
                   key = cds_access_token)

durham_coords<-c(43.136722, -70.934333)
xmn <- durham_coords[2]
xmx <- durham_coords[2]
ymn <- durham_coords[1]
ymx <- durham_coords[1]

# temporal extent
st_time <- as.POSIXlt("2023-01-01 00:00", tz = "UTC")
en_time <- as.POSIXlt("2023-12-01 23:00",  tz = "UTC")


# Set a unique prefix for the filename (here based on spatial
# coordinates), and the file path for downloaded .nc files
file_prefix <- "era5_durham"
file_path <- "projects/gingko/data/era_data"


# build a request (covering multiple years)
req <- build_era5_request(xmin = xmn, xmax = xmx, 
                          ymin = ymn, ymax = ymx,
                          start_time = st_time,
                          end_time = en_time,
                          outfile_name = file_prefix)
```

```{r,eval=F,echo=F}

request_era5(request = req, uid = uid, out_path = file_path,overwrite = T,combine=T)
#we moved the resultant file to the era_data folder
```

```{r,eval=F,echo=F}

##########################################
#note: the nc file request downloaded .nc files on a monthly basis, so we had to combine files into whole year .nc files using cdo program on linux
#same start date
st_time <- as.POSIXlt("2023-07-22 00:00", tz = "UTC")
en_time23<-as.POSIXlt("2023-12-31 23:00", tz = "UTC")

#all years nc
nc_file <- "era5_41_47_-26_-20_202.nc"
my_nc<-paste0(file_path,"/era_data/",nc_file)

y<- -22.55423
x<- 43.285767
clim_point23<-extract_clim(nc = my_nc,
                           long = x,
                           lat = y,
                           start_time = st_time,
                           end_time = en_time23,
                           format = "microclima")
clim_point23$obs_time<-as.POSIXct(clim_point23$obs_time,tz = "UTC")

precip_point23 <- extract_precip(nc = my_nc, long = x, lat = y,
                                 start_time = st_time,  
                                 end_time = en_time23,
                                 convert_daily = F)
precip23<-data.frame("precip"=precip_point23,
                     "datetime" = seq.POSIXt(from=st_time,to=en_time23,by="hour"))

r <- microclima::get_dem(lat = y, long = x, resolution = 30)

temps23 <- microclima::runauto(r = r, dstart = "01/01/2023",dfinish = "31/12/2023", 
                               hgt = 2, l = NA, x = NA, 
                               habitat = "Barren or sparsely vegetated",
                               hourlydata = as.data.frame(clim_point23), 
                               dailyprecip = precip_point23, 
                               plot.progress= T,coastal=T)

air_temps<-salary_temps%>%dplyr::filter(site=="saleb10_chezFred")
era5_air<-clim_point%>%rename("temp" = "temperature","datetime" = "obs_time")%>%mutate("site" = "era5")
air_Temps<-bind_rows(era5_air,air_temps)

ggplot(data=air_Temps,aes(x=datetime,y=temp,group=site,color=site),alpha=0.01)+geom_line()

```

