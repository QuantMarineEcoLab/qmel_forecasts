[
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "QMEL Forecasting Group Projects",
    "section": "",
    "text": "Fall 2025: Gingko Forecasting"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QMEL Forecasting Group",
    "section": "",
    "text": "Fall 2025 Working Group Schedule\nProjects"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "QMEL Forecasting Group",
    "section": "",
    "text": "Fall 2025 Working Group Schedule\nProjects"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Time series graphics and decomposition.html",
    "href": "fall_2025/QMEL Forecasting/Time series graphics and decomposition.html",
    "title": "QMEL Forecasting Series - Time Series Graphics and Decomposition",
    "section": "",
    "text": "1. Chapter 2 - Time serires graphics (Notes)\nTime series - a list of numbers and information about that time those numbers were recorded\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tsibble)\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\nlibrary(fpp3)\n\n── Attaching packages ──────────────────────────────────────────── fpp3 1.0.1 ──\n✔ tsibbledata 0.4.1     ✔ fable       0.4.1\n✔ feasts      0.4.1     \n── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ──\n✖ purrr::%||%()        masks base::%||%()\n✖ lubridate::date()    masks base::date()\n✖ dplyr::filter()      masks stats::filter()\n✖ tsibble::intersect() masks base::intersect()\n✖ tsibble::interval()  masks lubridate::interval()\n✖ dplyr::lag()         masks stats::lag()\n✖ tsibble::setdiff()   masks base::setdiff()\n✖ tsibble::union()     masks base::union()\n\n\n\n# tsibble extends tibble objects by introducing a temporal structure. You can manipulate multiple time series. Work well with tidyverse functions!\n\n# Contain:\n# Index Time information about an observations - ex. Yearly, Quarterly\n# Key - unique time series in the data set, ex Countries, Region\n# Measured variables\n\n# Creating your own tsibble\ny &lt;- tsibble(\n  Year = 2015:2019,\n  Observation = c(123, 39, 78, 52, 110),\n  index = Year)\n\n# But more frequently you will convert your own read in data \n\nmy_data&lt;-tibble(\n  year = 2015:2019,\n  y = c(123, 39, 78, 52, 110)) |&gt; \n  as_tsibble(index=year)\n\n\nz &lt;- tibble(\n  Month = c(\"2019 Jan\", \"2019 Feb\", \"2019 Mar\", \"2019 Apr\", \"2019 May\"),\n  Obersvation = c(50, 23, 34, 30, 25)\n)\n\n# Month is recognized as a character, but using tsibble we can convert this to a mothly time object\nz |&gt; \n  mutate(Month = yearmonth(Month)) |&gt; \n  as_tsibble(index = Month)\n\n# A tsibble: 5 x 2 [1M]\n     Month Obersvation\n     &lt;mth&gt;       &lt;dbl&gt;\n1 2019 Jan          50\n2 2019 Feb          23\n3 2019 Mar          34\n4 2019 Apr          30\n5 2019 May          25\n\n# tsibble can also store multiple time series in a single object\n\n# Example, here we are informed that we have 14 different time series. The 14 different times series in the object are uniquely identified by the Length and Sex variables.\nolympic_running\n\n# A tsibble: 312 x 4 [4Y]\n# Key:       Length, Sex [14]\n    Year Length Sex    Time\n   &lt;int&gt;  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt;\n 1  1896    100 men    12  \n 2  1900    100 men    11  \n 3  1904    100 men    11  \n 4  1908    100 men    10.8\n 5  1912    100 men    10.8\n 6  1916    100 men    NA  \n 7  1920    100 men    10.8\n 8  1924    100 men    10.6\n 9  1928    100 men    10.8\n10  1932    100 men    10.3\n# ℹ 302 more rows\n\nolympic_running |&gt; distinct(Sex)\n\n# A tibble: 2 × 1\n  Sex  \n  &lt;chr&gt;\n1 men  \n2 women\n\nolympic_running |&gt; distinct(Length)\n\n# A tibble: 7 × 1\n  Length\n   &lt;int&gt;\n1    100\n2    200\n3    400\n4    800\n5   1500\n6   5000\n7  10000\n\n# We can also used tidy functions such as mutate(), filter(), select(), and summarise()\n\n# Monthly data on Medicare Australia prescription data from July 1991 to June 2008\nPBS\n\n# A tsibble: 67,596 x 9 [1M]\n# Key:       Concession, Type, ATC1, ATC2 [336]\n      Month Concession   Type      ATC1  ATC1_desc ATC2  ATC2_desc Scripts  Cost\n      &lt;mth&gt; &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 1991 Jul Concessional Co-payme… A     Alimenta… A01   STOMATOL…   18228 67877\n 2 1991 Aug Concessional Co-payme… A     Alimenta… A01   STOMATOL…   15327 57011\n 3 1991 Sep Concessional Co-payme… A     Alimenta… A01   STOMATOL…   14775 55020\n 4 1991 Oct Concessional Co-payme… A     Alimenta… A01   STOMATOL…   15380 57222\n 5 1991 Nov Concessional Co-payme… A     Alimenta… A01   STOMATOL…   14371 52120\n 6 1991 Dec Concessional Co-payme… A     Alimenta… A01   STOMATOL…   15028 54299\n 7 1992 Jan Concessional Co-payme… A     Alimenta… A01   STOMATOL…   11040 39753\n 8 1992 Feb Concessional Co-payme… A     Alimenta… A01   STOMATOL…   15165 54405\n 9 1992 Mar Concessional Co-payme… A     Alimenta… A01   STOMATOL…   16898 61108\n10 1992 Apr Concessional Co-payme… A     Alimenta… A01   STOMATOL…   18141 65356\n# ℹ 67,586 more rows\n\na10 &lt;- PBS |&gt;\n  filter(ATC2 == \"A10\") |&gt;\n  select(Month, Concession, Type, Cost) |&gt;\n  summarise(TotalC = sum(Cost)) |&gt;\n  mutate(Cost = TotalC / 1e6) \n\n\n# Most times we are reading our data into R, we can convert this data into a tsibble object as well.\nprison &lt;- readr::read_csv(\"https://OTexts.com/fpp3/extrafiles/prison_population.csv\")\n\nRows: 3072 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): State, Gender, Legal, Indigenous\ndbl  (1): Count\ndate (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nwrite.csv(\"Data/prison.csv\")\n\n\"\",\"x\"\n\"1\",\"Data/prison.csv\"\n\nprison.tib &lt;- prison |&gt; \n  mutate(Quarter = yearquarter(Date)) |&gt; \n  select(-Date) |&gt; \n  as_tsibble(key = c(State, Gender, Legal, Indigenous),\n                     index = Quarter)\n\nprison\n\n# A tibble: 3,072 × 6\n   Date       State Gender Legal     Indigenous Count\n   &lt;date&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt;\n 1 2005-03-01 ACT   Female Remanded  ATSI           0\n 2 2005-03-01 ACT   Female Remanded  Non-ATSI       2\n 3 2005-03-01 ACT   Female Sentenced ATSI           0\n 4 2005-03-01 ACT   Female Sentenced Non-ATSI       5\n 5 2005-03-01 ACT   Male   Remanded  ATSI           7\n 6 2005-03-01 ACT   Male   Remanded  Non-ATSI      58\n 7 2005-03-01 ACT   Male   Sentenced ATSI           5\n 8 2005-03-01 ACT   Male   Sentenced Non-ATSI     101\n 9 2005-03-01 NSW   Female Remanded  ATSI          51\n10 2005-03-01 NSW   Female Remanded  Non-ATSI     131\n# ℹ 3,062 more rows\n\nprison.tib # 64 differnt data sets\n\n# A tsibble: 3,072 x 6 [1Q]\n# Key:       State, Gender, Legal, Indigenous [64]\n   State Gender Legal    Indigenous Count Quarter\n   &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;   &lt;qtr&gt;\n 1 ACT   Female Remanded ATSI           0 2005 Q1\n 2 ACT   Female Remanded ATSI           1 2005 Q2\n 3 ACT   Female Remanded ATSI           0 2005 Q3\n 4 ACT   Female Remanded ATSI           0 2005 Q4\n 5 ACT   Female Remanded ATSI           1 2006 Q1\n 6 ACT   Female Remanded ATSI           1 2006 Q2\n 7 ACT   Female Remanded ATSI           1 2006 Q3\n 8 ACT   Female Remanded ATSI           0 2006 Q4\n 9 ACT   Female Remanded ATSI           0 2007 Q1\n10 ACT   Female Remanded ATSI           1 2007 Q2\n# ℹ 3,062 more rows\n\n\nSeasonal Periods\nTime Plots\n\nansett\n\n# A tsibble: 7,407 x 4 [1W]\n# Key:       Airports, Class [30]\n       Week Airports Class    Passengers\n     &lt;week&gt; &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt;\n 1 1989 W28 ADL-PER  Business        193\n 2 1989 W29 ADL-PER  Business        254\n 3 1989 W30 ADL-PER  Business        185\n 4 1989 W31 ADL-PER  Business        254\n 5 1989 W32 ADL-PER  Business        191\n 6 1989 W33 ADL-PER  Business        136\n 7 1989 W34 ADL-PER  Business          0\n 8 1989 W35 ADL-PER  Business          0\n 9 1989 W36 ADL-PER  Business          0\n10 1989 W37 ADL-PER  Business          0\n# ℹ 7,397 more rows\n\nmelsyd_economy &lt;- ansett |&gt; \n  filter(Airports == \"MEL-SYD\", Class == \"Economy\") |&gt; \n  mutate(Passengers = Passengers/1000)\n\nautoplot(melsyd_economy, Passengers) +\n  labs(Title = \"Ansett airlines economy class\",\n       subtitle = \"Melbourne-Sydney\",\n       y = \"Passengers('000)\")\n\n\n\n\n\n\n\n# auto plot will be used frequently \n# what can we say upon first observation of this time series\n\nautoplot(a10, Cost)+\n  labs(y=\"$ (millions)\",\n       title = \"Australian antidiabetic drug sales\")\n\n\n\n\n\n\n\n# Here we see an increasing trend, with a seasonal patters.\n# Forecasts would need to take these into consideration\n\nImportant Definitions\nTrend - A long term increase of decrease in the data. This does not have to be linear, it can sometimes “change directions”.\nSeasonal - A seasonal pattern occurs when a time series is affected by seasonal factors such as the time of year or the day of the week. Seasonality is always of a fixed and known period.\nCyclic - A cycle occurs when the data exhibits rises and falls that are not of a fixed frequency.\nIn general, the average length of cycles is longer than the length of a seasonal pattern and the magnitudes of cycles tend to be more variable than the magnitudes of seasonal patterns.\nSeasonal Plots\n\na10\n\n# A tsibble: 204 x 3 [1M]\n      Month  TotalC  Cost\n      &lt;mth&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 1991 Jul 3526591  3.53\n 2 1991 Aug 3180891  3.18\n 3 1991 Sep 3252221  3.25\n 4 1991 Oct 3611003  3.61\n 5 1991 Nov 3565869  3.57\n 6 1991 Dec 4306371  4.31\n 7 1992 Jan 5088335  5.09\n 8 1992 Feb 2814520  2.81\n 9 1992 Mar 2985811  2.99\n10 1992 Apr 3204780  3.20\n# ℹ 194 more rows\n\na10 |&gt; \n  gg_season(Cost, lables = \"both\")+\n  labs(y = \"$ (millions)\",\n       title = \"Seasonal plot: Antidiabetic drug sales\")\n\nWarning in geom_line(...): Ignoring unknown parameters: `lables`\n\n\n\n\n\n\n\n\n\nMultiple seasonal periods\n\nvic_elec\n\n# A tsibble: 52,608 x 5 [30m] &lt;Australia/Melbourne&gt;\n   Time                Demand Temperature Date       Holiday\n   &lt;dttm&gt;               &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;     &lt;lgl&gt;  \n 1 2012-01-01 00:00:00  4383.        21.4 2012-01-01 TRUE   \n 2 2012-01-01 00:30:00  4263.        21.0 2012-01-01 TRUE   \n 3 2012-01-01 01:00:00  4049.        20.7 2012-01-01 TRUE   \n 4 2012-01-01 01:30:00  3878.        20.6 2012-01-01 TRUE   \n 5 2012-01-01 02:00:00  4036.        20.4 2012-01-01 TRUE   \n 6 2012-01-01 02:30:00  3866.        20.2 2012-01-01 TRUE   \n 7 2012-01-01 03:00:00  3694.        20.1 2012-01-01 TRUE   \n 8 2012-01-01 03:30:00  3562.        19.6 2012-01-01 TRUE   \n 9 2012-01-01 04:00:00  3433.        19.1 2012-01-01 TRUE   \n10 2012-01-01 04:30:00  3359.        19.0 2012-01-01 TRUE   \n# ℹ 52,598 more rows\n\nvic_elec |&gt; gg_season(Demand, period = \"day\") +\n  theme(legend.position = \"none\") +\n  labs(y=\"MWh\", title = \"Electricity demand: Victoria\")\n\n\n\n\n\n\n\nvic_elec |&gt; gg_season(Demand, period = \"week\") +\n  theme(legend.position = \"none\") +\n  labs(y=\"MWh\", title=\"Electricity demand: Victoria\")\n\n\n\n\n\n\n\nvic_elec |&gt; gg_season(Demand, period = \"year\") +\n  labs(y=\"MWh\", title=\"Electricity demand: Victoria\")\n\n\n\n\n\n\n\n\nSeasonal sub series plots\n\n# Data from each season are collected together in separate mini time plots\n# Plots each season separately\n\na10 |&gt;\n  gg_subseries(Cost) +\n  labs(\n    y = \"$ (millions)\",\n    title = \"Australian antidiabetic drug sales\"\n  )\n\n\n\n\n\n\n\n# Blue line is the average value for each month\n\n# Not too informative for this data\n\nholidays &lt;- tourism |&gt;\n  filter(Purpose == \"Holiday\") |&gt;\n  group_by(State) |&gt;\n  summarise(Trips = sum(Trips))\nholidays\n\n# A tsibble: 640 x 3 [1Q]\n# Key:       State [8]\n   State Quarter Trips\n   &lt;chr&gt;   &lt;qtr&gt; &lt;dbl&gt;\n 1 ACT   1998 Q1  196.\n 2 ACT   1998 Q2  127.\n 3 ACT   1998 Q3  111.\n 4 ACT   1998 Q4  170.\n 5 ACT   1999 Q1  108.\n 6 ACT   1999 Q2  125.\n 7 ACT   1999 Q3  178.\n 8 ACT   1999 Q4  218.\n 9 ACT   2000 Q1  158.\n10 ACT   2000 Q2  155.\n# ℹ 630 more rows\n\nautoplot(holidays, Trips) +\n  labs(y = \"Overnight trips ('000)\",\n       title = \"Australian domestic holidays\")\n\n\n\n\n\n\n\ngg_season(holidays, Trips) +\n  labs(y = \"Overnight trips ('000)\",\n       title = \"Australian domestic holidays\")\n\n\n\n\n\n\n\n# Seasonality in some states is very different than the seasonality in other states\n\n\nholidays |&gt;\n  gg_subseries(Trips) +\n  labs(y = \"Overnight trips ('000)\",\n       title = \"Australian domestic holidays\")\n\n\n\n\n\n\n\n\nScatterplots\nSometimes we are intereted in relationships between multiple time series\n\nvic_elec |&gt;\n  filter(year(Time) == 2014) |&gt;\n  autoplot(Demand) +\n  labs(y = \"GW\",\n       title = \"Half-hourly electricity demand: Victoria\")\n\n\n\n\n\n\n\n\n\n\n2. Chapter 2 - Exercises\n\nExplore the following four time series: Bricks from aus_production, Lynx from pelt, Close from gafa_stock, Demand from vic_elec.\n\n\naus_production # Looks to be quarterly data\n\n# A tsibble: 218 x 7 [1Q]\n   Quarter  Beer Tobacco Bricks Cement Electricity   Gas\n     &lt;qtr&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 1956 Q1   284    5225    189    465        3923     5\n 2 1956 Q2   213    5178    204    532        4436     6\n 3 1956 Q3   227    5297    208    561        4806     7\n 4 1956 Q4   308    5681    197    570        4418     6\n 5 1957 Q1   262    5577    187    529        4339     5\n 6 1957 Q2   228    5651    214    604        4811     7\n 7 1957 Q3   236    5317    227    603        5259     7\n 8 1957 Q4   320    6152    222    582        4735     6\n 9 1958 Q1   272    5758    199    554        4608     5\n10 1958 Q2   233    5641    229    620        5196     7\n# ℹ 208 more rows\n\naus_production |&gt; \n  autoplot(Bricks)\n\nWarning: Removed 20 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\npelt # Yearly data\n\n# A tsibble: 91 x 3 [1Y]\n    Year  Hare  Lynx\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1845 19580 30090\n 2  1846 19600 45150\n 3  1847 19610 49150\n 4  1848 11990 39520\n 5  1849 28040 21230\n 6  1850 58000  8420\n 7  1851 74600  5560\n 8  1852 75090  5080\n 9  1853 88480 10170\n10  1854 61280 19600\n# ℹ 81 more rows\n\npelt |&gt; \n  autoplot(Lynx)\n\n\n\n\n\n\n\ngafa_stock # daily data that skips weekends?\n\n# A tsibble: 5,032 x 8 [!]\n# Key:       Symbol [4]\n   Symbol Date        Open  High   Low Close Adj_Close    Volume\n   &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 AAPL   2014-01-02  79.4  79.6  78.9  79.0      67.0  58671200\n 2 AAPL   2014-01-03  79.0  79.1  77.2  77.3      65.5  98116900\n 3 AAPL   2014-01-06  76.8  78.1  76.2  77.7      65.9 103152700\n 4 AAPL   2014-01-07  77.8  78.0  76.8  77.1      65.4  79302300\n 5 AAPL   2014-01-08  77.0  77.9  77.0  77.6      65.8  64632400\n 6 AAPL   2014-01-09  78.1  78.1  76.5  76.6      65.0  69787200\n 7 AAPL   2014-01-10  77.1  77.3  75.9  76.1      64.5  76244000\n 8 AAPL   2014-01-13  75.7  77.5  75.7  76.5      64.9  94623200\n 9 AAPL   2014-01-14  76.9  78.1  76.8  78.1      66.1  83140400\n10 AAPL   2014-01-15  79.1  80.0  78.8  79.6      67.5  97909700\n# ℹ 5,022 more rows\n\ngafa_stock |&gt; \n  autoplot(Close)\n\n\n\n\n\n\n\nvic_elec # Data collected every 30 min\n\n# A tsibble: 52,608 x 5 [30m] &lt;Australia/Melbourne&gt;\n   Time                Demand Temperature Date       Holiday\n   &lt;dttm&gt;               &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;     &lt;lgl&gt;  \n 1 2012-01-01 00:00:00  4383.        21.4 2012-01-01 TRUE   \n 2 2012-01-01 00:30:00  4263.        21.0 2012-01-01 TRUE   \n 3 2012-01-01 01:00:00  4049.        20.7 2012-01-01 TRUE   \n 4 2012-01-01 01:30:00  3878.        20.6 2012-01-01 TRUE   \n 5 2012-01-01 02:00:00  4036.        20.4 2012-01-01 TRUE   \n 6 2012-01-01 02:30:00  3866.        20.2 2012-01-01 TRUE   \n 7 2012-01-01 03:00:00  3694.        20.1 2012-01-01 TRUE   \n 8 2012-01-01 03:30:00  3562.        19.6 2012-01-01 TRUE   \n 9 2012-01-01 04:00:00  3433.        19.1 2012-01-01 TRUE   \n10 2012-01-01 04:30:00  3359.        19.0 2012-01-01 TRUE   \n# ℹ 52,598 more rows\n\nvic_elec |&gt; \n  autoplot(Demand) \n\n\n\n\n\n\n\n\n\nUse filter() to find what days corresponded to the peak closing price for each of the four stocks in gafa_stock.\n\n\ngafa_stock&lt;-gafa_stock # daily data that skips weekends?\n\ngafa_stock\n\n# A tsibble: 5,032 x 8 [!]\n# Key:       Symbol [4]\n   Symbol Date        Open  High   Low Close Adj_Close    Volume\n   &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 AAPL   2014-01-02  79.4  79.6  78.9  79.0      67.0  58671200\n 2 AAPL   2014-01-03  79.0  79.1  77.2  77.3      65.5  98116900\n 3 AAPL   2014-01-06  76.8  78.1  76.2  77.7      65.9 103152700\n 4 AAPL   2014-01-07  77.8  78.0  76.8  77.1      65.4  79302300\n 5 AAPL   2014-01-08  77.0  77.9  77.0  77.6      65.8  64632400\n 6 AAPL   2014-01-09  78.1  78.1  76.5  76.6      65.0  69787200\n 7 AAPL   2014-01-10  77.1  77.3  75.9  76.1      64.5  76244000\n 8 AAPL   2014-01-13  75.7  77.5  75.7  76.5      64.9  94623200\n 9 AAPL   2014-01-14  76.9  78.1  76.8  78.1      66.1  83140400\n10 AAPL   2014-01-15  79.1  80.0  78.8  79.6      67.5  97909700\n# ℹ 5,022 more rows\n\n# Ploting data\n gafa_stock|&gt; \n  autoplot(Close)\n\n\n\n\n\n\n\n dates &lt;- gafa_stock|&gt; \n  group_by(Symbol) |&gt; \n   mutate(peak_close = max(Close)) |&gt; \n   filter(Close == peak_close) |&gt; \n   select(Symbol, Date, Close)\n\n\n\n\n\ntute1 &lt;- readr::read_csv(\"Data/tute1.csv\")\n\nRows: 100 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl  (3): Sales, AdBudget, GDP\ndate (1): Quarter\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nView(tute1)\n\nmytimeseries &lt;- tute1 |&gt;\n  mutate(Quarter = yearquarter(Quarter)) |&gt;\n  as_tsibble(index = Quarter)\n\nmytimeseries |&gt;\n  pivot_longer(-Quarter)|&gt;\n  ggplot(aes(x = Quarter, y = value, colour = name)) +\n  geom_line() +\n  facet_grid(name ~ ., scales = \"free_y\")\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(USgas)\n\nus_total\n\n     year                              state        y\n1    1997                            Alabama   324158\n2    1998                            Alabama   329134\n3    1999                            Alabama   337270\n4    2000                            Alabama   353614\n5    2001                            Alabama   332693\n6    2002                            Alabama   379343\n7    2003                            Alabama   350345\n8    2004                            Alabama   382367\n9    2005                            Alabama   353156\n10   2006                            Alabama   391093\n11   2007                            Alabama   418512\n12   2008                            Alabama   404157\n13   2009                            Alabama   454456\n14   2010                            Alabama   534779\n15   2011                            Alabama   598514\n16   2012                            Alabama   666712\n17   2013                            Alabama   615407\n18   2014                            Alabama   635323\n19   2015                            Alabama   681149\n20   2016                            Alabama   694881\n21   2017                            Alabama   661366\n22   2018                            Alabama   750188\n23   2019                            Alabama   729402\n24   1997                             Alaska   425393\n25   1998                             Alaska   434871\n26   1999                             Alaska   422816\n27   2000                             Alaska   427288\n28   2001                             Alaska   408960\n29   2002                             Alaska   419131\n30   2003                             Alaska   414234\n31   2004                             Alaska   406319\n32   2005                             Alaska   432972\n33   2006                             Alaska   373850\n34   2007                             Alaska   369967\n35   2008                             Alaska   341888\n36   2009                             Alaska   342261\n37   2010                             Alaska   333312\n38   2011                             Alaska   335458\n39   2012                             Alaska   343110\n40   2013                             Alaska   332298\n41   2014                             Alaska   328945\n42   2015                             Alaska   333602\n43   2016                             Alaska   330552\n44   2017                             Alaska   347725\n45   2018                             Alaska   355132\n46   2019                             Alaska   366476\n47   1997                            Arizona   134706\n48   1998                            Arizona   158355\n49   1999                            Arizona   165076\n50   2000                            Arizona   205235\n51   2001                            Arizona   240812\n52   2002                            Arizona   250734\n53   2003                            Arizona   272921\n54   2004                            Arizona   349622\n55   2005                            Arizona   321584\n56   2006                            Arizona   358069\n57   2007                            Arizona   392954\n58   2008                            Arizona   399188\n59   2009                            Arizona   369739\n60   2010                            Arizona   330914\n61   2011                            Arizona   288802\n62   2012                            Arizona   332068\n63   2013                            Arizona   332073\n64   2014                            Arizona   306715\n65   2015                            Arizona   351263\n66   2016                            Arizona   360576\n67   2017                            Arizona   321451\n68   2018                            Arizona   384753\n69   2019                            Arizona   468482\n70   1997                           Arkansas   260113\n71   1998                           Arkansas   266485\n72   1999                           Arkansas   252853\n73   2000                           Arkansas   251329\n74   2001                           Arkansas   227943\n75   2002                           Arkansas   242325\n76   2003                           Arkansas   246916\n77   2004                           Arkansas   215124\n78   2005                           Arkansas   213609\n79   2006                           Arkansas   233868\n80   2007                           Arkansas   226439\n81   2008                           Arkansas   234901\n82   2009                           Arkansas   244193\n83   2010                           Arkansas   271515\n84   2011                           Arkansas   284076\n85   2012                           Arkansas   296132\n86   2013                           Arkansas   282120\n87   2014                           Arkansas   268444\n88   2015                           Arkansas   291006\n89   2016                           Arkansas   309732\n90   2017                           Arkansas   311609\n91   2018                           Arkansas   360804\n92   2019                           Arkansas   360024\n93   1997                         California  2146211\n94   1998                         California  2309883\n95   1999                         California  2339521\n96   2000                         California  2508797\n97   2001                         California  2464565\n98   2002                         California  2273193\n99   2003                         California  2269405\n100  2004                         California  2406889\n101  2005                         California  2248256\n102  2006                         California  2315721\n103  2007                         California  2395674\n104  2008                         California  2405266\n105  2009                         California  2328504\n106  2010                         California  2273128\n107  2011                         California  2153186\n108  2012                         California  2403494\n109  2013                         California  2415571\n110  2014                         California  2339392\n111  2015                         California  2301217\n112  2016                         California  2172889\n113  2017                         California  2116902\n114  2018                         California  2137920\n115  2019                         California  2154030\n116  1997                           Colorado   314486\n117  1998                           Colorado   330259\n118  1999                           Colorado   333085\n119  2000                           Colorado   367920\n120  2001                           Colorado   463738\n121  2002                           Colorado   459397\n122  2003                           Colorado   436253\n123  2004                           Colorado   440378\n124  2005                           Colorado   470321\n125  2006                           Colorado   450832\n126  2007                           Colorado   504775\n127  2008                           Colorado   504783\n128  2009                           Colorado   523726\n129  2010                           Colorado   501350\n130  2011                           Colorado   466680\n131  2012                           Colorado   443750\n132  2013                           Colorado   467798\n133  2014                           Colorado   478987\n134  2015                           Colorado   466906\n135  2016                           Colorado   441018\n136  2017                           Colorado   438137\n137  2018                           Colorado   485735\n138  2019                           Colorado   520139\n139  1997                        Connecticut   144708\n140  1998                        Connecticut   131497\n141  1999                        Connecticut   152237\n142  2000                        Connecticut   159712\n143  2001                        Connecticut   146278\n144  2002                        Connecticut   177587\n145  2003                        Connecticut   154075\n146  2004                        Connecticut   162642\n147  2005                        Connecticut   168067\n148  2006                        Connecticut   172682\n149  2007                        Connecticut   180181\n150  2008                        Connecticut   166801\n151  2009                        Connecticut   185056\n152  2010                        Connecticut   199426\n153  2011                        Connecticut   230036\n154  2012                        Connecticut   229156\n155  2013                        Connecticut   234475\n156  2014                        Connecticut   235859\n157  2015                        Connecticut   254065\n158  2016                        Connecticut   247958\n159  2017                        Connecticut   239818\n160  2018                        Connecticut   277931\n161  2019                        Connecticut   283408\n162  1997                           Delaware    46511\n163  1998                           Delaware    40809\n164  1999                           Delaware    56013\n165  2000                           Delaware    48387\n166  2001                           Delaware    50113\n167  2002                           Delaware    52216\n168  2003                           Delaware    46177\n169  2004                           Delaware    48057\n170  2005                           Delaware    46904\n171  2006                           Delaware    43190\n172  2007                           Delaware    48155\n173  2008                           Delaware    48162\n174  2009                           Delaware    50148\n175  2010                           Delaware    54825\n176  2011                           Delaware    79715\n177  2012                           Delaware   101676\n178  2013                           Delaware    95978\n179  2014                           Delaware   101379\n180  2015                           Delaware   102693\n181  2016                           Delaware   108562\n182  2017                           Delaware    98966\n183  2018                           Delaware    95516\n184  2019                           Delaware    89214\n185  1997               District of Columbia    34105\n186  1998               District of Columbia    30409\n187  1999               District of Columbia    32281\n188  2000               District of Columbia    33468\n189  2001               District of Columbia    29802\n190  2002               District of Columbia    32898\n191  2003               District of Columbia    32814\n192  2004               District of Columbia    32227\n193  2005               District of Columbia    32085\n194  2006               District of Columbia    29049\n195  2007               District of Columbia    32966\n196  2008               District of Columbia    31880\n197  2009               District of Columbia    33177\n198  2010               District of Columbia    33251\n199  2011               District of Columbia    32862\n200  2012               District of Columbia    28561\n201  2013               District of Columbia    32743\n202  2014               District of Columbia    33848\n203  2015               District of Columbia    32237\n204  2016               District of Columbia    28888\n205  2017               District of Columbia    29457\n206  2018               District of Columbia    31490\n207  2019               District of Columbia    30544\n208  1999 Federal Offshore -- Gulf of Mexico        0\n209  2000 Federal Offshore -- Gulf of Mexico        0\n210  2001 Federal Offshore -- Gulf of Mexico        0\n211  2002 Federal Offshore -- Gulf of Mexico   109277\n212  2003 Federal Offshore -- Gulf of Mexico    98372\n213  2004 Federal Offshore -- Gulf of Mexico    90025\n214  2005 Federal Offshore -- Gulf of Mexico    78139\n215  2006 Federal Offshore -- Gulf of Mexico   102242\n216  2007 Federal Offshore -- Gulf of Mexico   115528\n217  2008 Federal Offshore -- Gulf of Mexico   102389\n218  2009 Federal Offshore -- Gulf of Mexico   103976\n219  2010 Federal Offshore -- Gulf of Mexico   108490\n220  2011 Federal Offshore -- Gulf of Mexico   101217\n221  2012 Federal Offshore -- Gulf of Mexico    93985\n222  2013 Federal Offshore -- Gulf of Mexico    95207\n223  2014 Federal Offshore -- Gulf of Mexico    93814\n224  2015 Federal Offshore -- Gulf of Mexico    95492\n225  2016 Federal Offshore -- Gulf of Mexico    95832\n226  2017 Federal Offshore -- Gulf of Mexico    94379\n227  2018 Federal Offshore -- Gulf of Mexico    94178\n228  2019 Federal Offshore -- Gulf of Mexico    94298\n229  1997                            Florida   522116\n230  1998                            Florida   503844\n231  1999                            Florida   559366\n232  2000                            Florida   541847\n233  2001                            Florida   543143\n234  2002                            Florida   689337\n235  2003                            Florida   689986\n236  2004                            Florida   734178\n237  2005                            Florida   778209\n238  2006                            Florida   891611\n239  2007                            Florida   917244\n240  2008                            Florida   942699\n241  2009                            Florida  1055340\n242  2010                            Florida  1158452\n243  2011                            Florida  1217689\n244  2012                            Florida  1328463\n245  2013                            Florida  1225676\n246  2014                            Florida  1214531\n247  2015                            Florida  1345790\n248  2016                            Florida  1382558\n249  2017                            Florida  1387960\n250  2018                            Florida  1477160\n251  2019                            Florida  1545434\n252  1997                            Georgia   371376\n253  1998                            Georgia   368579\n254  1999                            Georgia   337576\n255  2000                            Georgia   413845\n256  2001                            Georgia   351109\n257  2002                            Georgia   383546\n258  2003                            Georgia   379761\n259  2004                            Georgia   394986\n260  2005                            Georgia   412560\n261  2006                            Georgia   420469\n262  2007                            Georgia   441107\n263  2008                            Georgia   425043\n264  2009                            Georgia   462799\n265  2010                            Georgia   530030\n266  2011                            Georgia   522897\n267  2012                            Georgia   615771\n268  2013                            Georgia   625283\n269  2014                            Georgia   652408\n270  2015                            Georgia   694399\n271  2016                            Georgia   706688\n272  2017                            Georgia   689501\n273  2018                            Georgia   738986\n274  2019                            Georgia   753735\n275  1997                             Hawaii     2894\n276  1998                             Hawaii     2654\n277  1999                             Hawaii     3115\n278  2000                             Hawaii     2841\n279  2001                             Hawaii     2818\n280  2002                             Hawaii     2734\n281  2003                             Hawaii     2732\n282  2004                             Hawaii     2774\n283  2005                             Hawaii     2795\n284  2006                             Hawaii     2783\n285  2007                             Hawaii     2850\n286  2008                             Hawaii     2702\n287  2009                             Hawaii     2607\n288  2010                             Hawaii     2627\n289  2011                             Hawaii     2619\n290  2012                             Hawaii     2689\n291  2013                             Hawaii     2855\n292  2014                             Hawaii     2916\n293  2015                             Hawaii     2924\n294  2016                             Hawaii     3040\n295  2017                             Hawaii     3106\n296  2018                             Hawaii     3282\n297  2019                             Hawaii     3277\n298  1997                              Idaho    68669\n299  1998                              Idaho    69277\n300  1999                              Idaho    70672\n301  2000                              Idaho    72697\n302  2001                              Idaho    80279\n303  2002                              Idaho    71481\n304  2003                              Idaho    69868\n305  2004                              Idaho    75335\n306  2005                              Idaho    74540\n307  2006                              Idaho    75709\n308  2007                              Idaho    81937\n309  2008                              Idaho    88515\n310  2009                              Idaho    85197\n311  2010                              Idaho    83326\n312  2011                              Idaho    82544\n313  2012                              Idaho    89004\n314  2013                              Idaho   104783\n315  2014                              Idaho    92046\n316  2015                              Idaho   104730\n317  2016                              Idaho   106306\n318  2017                              Idaho   111334\n319  2018                              Idaho   111700\n320  2019                              Idaho   127638\n321  1997                           Illinois  1077139\n322  1998                           Illinois   957254\n323  1999                           Illinois  1004281\n324  2000                           Illinois  1030604\n325  2001                           Illinois   951616\n326  2002                           Illinois  1049878\n327  2003                           Illinois   998486\n328  2004                           Illinois   953207\n329  2005                           Illinois   969642\n330  2006                           Illinois   893997\n331  2007                           Illinois   965591\n332  2008                           Illinois  1000501\n333  2009                           Illinois   956068\n334  2010                           Illinois   966678\n335  2011                           Illinois   986867\n336  2012                           Illinois   940367\n337  2013                           Illinois  1056826\n338  2014                           Illinois  1093931\n339  2015                           Illinois   993548\n340  2016                           Illinois  1024186\n341  2017                           Illinois  1017772\n342  2018                           Illinois  1108592\n343  2019                           Illinois  1134722\n344  1997                            Indiana   556624\n345  1998                            Indiana   521748\n346  1999                            Indiana   556932\n347  2000                            Indiana   570558\n348  2001                            Indiana   501711\n349  2002                            Indiana   539034\n350  2003                            Indiana   527037\n351  2004                            Indiana   526701\n352  2005                            Indiana   531111\n353  2006                            Indiana   496303\n354  2007                            Indiana   535796\n355  2008                            Indiana   551424\n356  2009                            Indiana   506944\n357  2010                            Indiana   573866\n358  2011                            Indiana   630669\n359  2012                            Indiana   649921\n360  2013                            Indiana   672751\n361  2014                            Indiana   713416\n362  2015                            Indiana   718725\n363  2016                            Indiana   754276\n364  2017                            Indiana   720453\n365  2018                            Indiana   854024\n366  2019                            Indiana   894471\n367  1997                               Iowa   254489\n368  1998                               Iowa   232057\n369  1999                               Iowa   230691\n370  2000                               Iowa   232565\n371  2001                               Iowa   224336\n372  2002                               Iowa   226457\n373  2003                               Iowa   230161\n374  2004                               Iowa   226819\n375  2005                               Iowa   241340\n376  2006                               Iowa   238454\n377  2007                               Iowa   293274\n378  2008                               Iowa   325772\n379  2009                               Iowa   315186\n380  2010                               Iowa   311075\n381  2011                               Iowa   306909\n382  2012                               Iowa   295183\n383  2013                               Iowa   326140\n384  2014                               Iowa   329385\n385  2015                               Iowa   317821\n386  2016                               Iowa   330094\n387  2017                               Iowa   391129\n388  2018                               Iowa   443174\n389  2019                               Iowa   442873\n390  1997                             Kansas   338231\n391  1998                             Kansas   326674\n392  1999                             Kansas   302932\n393  2000                             Kansas   312369\n394  2001                             Kansas   272500\n395  2002                             Kansas   304992\n396  2003                             Kansas   281346\n397  2004                             Kansas   256779\n398  2005                             Kansas   255123\n399  2006                             Kansas   264253\n400  2007                             Kansas   286538\n401  2008                             Kansas   282904\n402  2009                             Kansas   286973\n403  2010                             Kansas   275184\n404  2011                             Kansas   279724\n405  2012                             Kansas   262316\n406  2013                             Kansas   283177\n407  2014                             Kansas   284651\n408  2015                             Kansas   270938\n409  2016                             Kansas   267315\n410  2017                             Kansas   269919\n411  2018                             Kansas   310028\n412  2019                             Kansas   306050\n413  1997                           Kentucky   227931\n414  1998                           Kentucky   205129\n415  1999                           Kentucky   218399\n416  2000                           Kentucky   225168\n417  2001                           Kentucky   208974\n418  2002                           Kentucky   227920\n419  2003                           Kentucky   223226\n420  2004                           Kentucky   225470\n421  2005                           Kentucky   234080\n422  2006                           Kentucky   211049\n423  2007                           Kentucky   229799\n424  2008                           Kentucky   225295\n425  2009                           Kentucky   206833\n426  2010                           Kentucky   232099\n427  2011                           Kentucky   223034\n428  2012                           Kentucky   225924\n429  2013                           Kentucky   229983\n430  2014                           Kentucky   255434\n431  2015                           Kentucky   270958\n432  2016                           Kentucky   271845\n433  2017                           Kentucky   283678\n434  2018                           Kentucky   340125\n435  2019                           Kentucky   336191\n436  1997                          Louisiana  1661061\n437  1998                          Louisiana  1569190\n438  1999                          Louisiana  1495478\n439  2000                          Louisiana  1536725\n440  2001                          Louisiana  1219013\n441  2002                          Louisiana  1341444\n442  2003                          Louisiana  1233505\n443  2004                          Louisiana  1281428\n444  2005                          Louisiana  1254370\n445  2006                          Louisiana  1217871\n446  2007                          Louisiana  1289421\n447  2008                          Louisiana  1238661\n448  2009                          Louisiana  1189744\n449  2010                          Louisiana  1354641\n450  2011                          Louisiana  1420264\n451  2012                          Louisiana  1482343\n452  2013                          Louisiana  1396261\n453  2014                          Louisiana  1423424\n454  2015                          Louisiana  1470354\n455  2016                          Louisiana  1591882\n456  2017                          Louisiana  1593181\n457  2018                          Louisiana  1738734\n458  2019                          Louisiana  1861894\n459  1997                              Maine     6290\n460  1998                              Maine     5716\n461  1999                              Maine     6572\n462  2000                              Maine    44779\n463  2001                              Maine    95733\n464  2002                              Maine   101536\n465  2003                              Maine    70832\n466  2004                              Maine    72565\n467  2005                              Maine    57835\n468  2006                              Maine    49605\n469  2007                              Maine    63183\n470  2008                              Maine    70146\n471  2009                              Maine    70334\n472  2010                              Maine    77575\n473  2011                              Maine    71690\n474  2012                              Maine    68266\n475  2013                              Maine    64091\n476  2014                              Maine    60663\n477  2015                              Maine    52777\n478  2016                              Maine    53128\n479  2017                              Maine    43810\n480  2018                              Maine    46464\n481  2019                              Maine    44484\n482  1997                           Maryland   212017\n483  1998                           Maryland   188552\n484  1999                           Maryland   196350\n485  2000                           Maryland   212133\n486  2001                           Maryland   178376\n487  2002                           Maryland   196276\n488  2003                           Maryland   197024\n489  2004                           Maryland   194725\n490  2005                           Maryland   202509\n491  2006                           Maryland   182294\n492  2007                           Maryland   201053\n493  2008                           Maryland   196067\n494  2009                           Maryland   196510\n495  2010                           Maryland   212020\n496  2011                           Maryland   193986\n497  2012                           Maryland   208946\n498  2013                           Maryland   197356\n499  2014                           Maryland   207103\n500  2015                           Maryland   215005\n501  2016                           Maryland   219024\n502  2017                           Maryland   222881\n503  2018                           Maryland   300637\n504  2019                           Maryland   300876\n505  1997                      Massachusetts   402629\n506  1998                      Massachusetts   358846\n507  1999                      Massachusetts   344790\n508  2000                      Massachusetts   343314\n509  2001                      Massachusetts   349103\n510  2002                      Massachusetts   393194\n511  2003                      Massachusetts   403991\n512  2004                      Massachusetts   372532\n513  2005                      Massachusetts   378068\n514  2006                      Massachusetts   370664\n515  2007                      Massachusetts   408704\n516  2008                      Massachusetts   406719\n517  2009                      Massachusetts   395852\n518  2010                      Massachusetts   432297\n519  2011                      Massachusetts   449194\n520  2012                      Massachusetts   416350\n521  2013                      Massachusetts   421001\n522  2014                      Massachusetts   421671\n523  2015                      Massachusetts   444332\n524  2016                      Massachusetts   427946\n525  2017                      Massachusetts   448996\n526  2018                      Massachusetts   438577\n527  2019                      Massachusetts   433774\n528  1997                           Michigan   994342\n529  1998                           Michigan   876444\n530  1999                           Michigan   951143\n531  2000                           Michigan   963136\n532  2001                           Michigan   906001\n533  2002                           Michigan   966354\n534  2003                           Michigan   924819\n535  2004                           Michigan   916629\n536  2005                           Michigan   913827\n537  2006                           Michigan   803336\n538  2007                           Michigan   798126\n539  2008                           Michigan   779602\n540  2009                           Michigan   735340\n541  2010                           Michigan   746748\n542  2011                           Michigan   776466\n543  2012                           Michigan   790642\n544  2013                           Michigan   814635\n545  2014                           Michigan   861755\n546  2015                           Michigan   844801\n547  2016                           Michigan   890324\n548  2017                           Michigan   870756\n549  2018                           Michigan   965538\n550  2019                           Michigan  1002237\n551  1997                          Minnesota   354092\n552  1998                          Minnesota   330513\n553  1999                          Minnesota   344591\n554  2000                          Minnesota   362025\n555  2001                          Minnesota   340911\n556  2002                          Minnesota   371583\n557  2003                          Minnesota   371261\n558  2004                          Minnesota   359898\n559  2005                          Minnesota   367825\n560  2006                          Minnesota   352570\n561  2007                          Minnesota   388335\n562  2008                          Minnesota   425352\n563  2009                          Minnesota   394136\n564  2010                          Minnesota   422968\n565  2011                          Minnesota   420770\n566  2012                          Minnesota   422263\n567  2013                          Minnesota   467874\n568  2014                          Minnesota   474520\n569  2015                          Minnesota   431315\n570  2016                          Minnesota   449783\n571  2017                          Minnesota   451979\n572  2018                          Minnesota   490169\n573  2019                          Minnesota   509061\n574  1997                        Mississippi   255475\n575  1998                        Mississippi   241342\n576  1999                        Mississippi   306733\n577  2000                        Mississippi   300652\n578  2001                        Mississippi   332589\n579  2002                        Mississippi   343890\n580  2003                        Mississippi   265842\n581  2004                        Mississippi   282051\n582  2005                        Mississippi   301663\n583  2006                        Mississippi   307305\n584  2007                        Mississippi   364067\n585  2008                        Mississippi   355006\n586  2009                        Mississippi   364323\n587  2010                        Mississippi   438733\n588  2011                        Mississippi   433538\n589  2012                        Mississippi   494016\n590  2013                        Mississippi   420594\n591  2014                        Mississippi   427584\n592  2015                        Mississippi   521355\n593  2016                        Mississippi   544464\n594  2017                        Mississippi   526862\n595  2018                        Mississippi   576888\n596  2019                        Mississippi   570154\n597  1997                           Missouri   283294\n598  1998                           Missouri   258652\n599  1999                           Missouri   265798\n600  2000                           Missouri   284763\n601  2001                           Missouri   283793\n602  2002                           Missouri   275629\n603  2003                           Missouri   262529\n604  2004                           Missouri   263945\n605  2005                           Missouri   268040\n606  2006                           Missouri   252697\n607  2007                           Missouri   272536\n608  2008                           Missouri   296058\n609  2009                           Missouri   264867\n610  2010                           Missouri   280181\n611  2011                           Missouri   272583\n612  2012                           Missouri   255875\n613  2013                           Missouri   276967\n614  2014                           Missouri   297087\n615  2015                           Missouri   267673\n616  2016                           Missouri   267170\n617  2017                           Missouri   261993\n618  2018                           Missouri   322805\n619  2019                           Missouri   316378\n620  1997                            Montana    59851\n621  1998                            Montana    59840\n622  1999                            Montana    62129\n623  2000                            Montana    67955\n624  2001                            Montana    65051\n625  2002                            Montana    69532\n626  2003                            Montana    68473\n627  2004                            Montana    66829\n628  2005                            Montana    68355\n629  2006                            Montana    73879\n630  2007                            Montana    73822\n631  2008                            Montana    76422\n632  2009                            Montana    75802\n633  2010                            Montana    72025\n634  2011                            Montana    78217\n635  2012                            Montana    73399\n636  2013                            Montana    79670\n637  2014                            Montana    78110\n638  2015                            Montana    75042\n639  2016                            Montana    75037\n640  2017                            Montana    80036\n641  2018                            Montana    87034\n642  2019                            Montana    88394\n643  1997                           Nebraska   132221\n644  1998                           Nebraska   130730\n645  1999                           Nebraska   121487\n646  2000                           Nebraska   126962\n647  2001                           Nebraska   121984\n648  2002                           Nebraska   120333\n649  2003                           Nebraska   118922\n650  2004                           Nebraska   115011\n651  2005                           Nebraska   119070\n652  2006                           Nebraska   129885\n653  2007                           Nebraska   150808\n654  2008                           Nebraska   171005\n655  2009                           Nebraska   163474\n656  2010                           Nebraska   168944\n657  2011                           Nebraska   171777\n658  2012                           Nebraska   158757\n659  2013                           Nebraska   173376\n660  2014                           Nebraska   172837\n661  2015                           Nebraska   161189\n662  2016                           Nebraska   163362\n663  2017                           Nebraska   166286\n664  2018                           Nebraska   185949\n665  2019                           Nebraska   185260\n666  1997                             Nevada   132128\n667  1998                             Nevada   148539\n668  1999                             Nevada   154689\n669  2000                             Nevada   189170\n670  2001                             Nevada   176835\n671  2002                             Nevada   176596\n672  2003                             Nevada   185846\n673  2004                             Nevada   214984\n674  2005                             Nevada   227149\n675  2006                             Nevada   249608\n676  2007                             Nevada   254406\n677  2008                             Nevada   264596\n678  2009                             Nevada   275468\n679  2010                             Nevada   259251\n680  2011                             Nevada   249971\n681  2012                             Nevada   273502\n682  2013                             Nevada   272965\n683  2014                             Nevada   253290\n684  2015                             Nevada   300002\n685  2016                             Nevada   304181\n686  2017                             Nevada   293849\n687  2018                             Nevada   299783\n688  2019                             Nevada   302373\n689  1997                      New Hampshire    20848\n690  1998                      New Hampshire    19127\n691  1999                      New Hampshire    20313\n692  2000                      New Hampshire    24950\n693  2001                      New Hampshire    23398\n694  2002                      New Hampshire    24901\n695  2003                      New Hampshire    54147\n696  2004                      New Hampshire    61172\n697  2005                      New Hampshire    70484\n698  2006                      New Hampshire    62549\n699  2007                      New Hampshire    62132\n700  2008                      New Hampshire    71179\n701  2009                      New Hampshire    59950\n702  2010                      New Hampshire    60378\n703  2011                      New Hampshire    69978\n704  2012                      New Hampshire    72032\n705  2013                      New Hampshire    54028\n706  2014                      New Hampshire    57018\n707  2015                      New Hampshire    68682\n708  2016                      New Hampshire    57957\n709  2017                      New Hampshire    52071\n710  2018                      New Hampshire    49888\n711  2019                      New Hampshire    53624\n712  1997                         New Jersey   717011\n713  1998                         New Jersey   679619\n714  1999                         New Jersey   715630\n715  2000                         New Jersey   605275\n716  2001                         New Jersey   564923\n717  2002                         New Jersey   598602\n718  2003                         New Jersey   612890\n719  2004                         New Jersey   620806\n720  2005                         New Jersey   602388\n721  2006                         New Jersey   547206\n722  2007                         New Jersey   618965\n723  2008                         New Jersey   614908\n724  2009                         New Jersey   620790\n725  2010                         New Jersey   654458\n726  2011                         New Jersey   660743\n727  2012                         New Jersey   652060\n728  2013                         New Jersey   682247\n729  2014                         New Jersey   773221\n730  2015                         New Jersey   745789\n731  2016                         New Jersey   762958\n732  2017                         New Jersey   706589\n733  2018                         New Jersey   770284\n734  2019                         New Jersey   766824\n735  1997                         New Mexico   256464\n736  1998                         New Mexico   245823\n737  1999                         New Mexico   236264\n738  2000                         New Mexico   266469\n739  2001                         New Mexico   266283\n740  2002                         New Mexico   235098\n741  2003                         New Mexico   221021\n742  2004                         New Mexico   223575\n743  2005                         New Mexico   220717\n744  2006                         New Mexico   223636\n745  2007                         New Mexico   234236\n746  2008                         New Mexico   246665\n747  2009                         New Mexico   241194\n748  2010                         New Mexico   241137\n749  2011                         New Mexico   246418\n750  2012                         New Mexico   243961\n751  2013                         New Mexico   245502\n752  2014                         New Mexico   247637\n753  2015                         New Mexico   250518\n754  2016                         New Mexico   247761\n755  2017                         New Mexico   239305\n756  2018                         New Mexico   271547\n757  2019                         New Mexico   296753\n758  1997                           New York  1324164\n759  1998                           New York  1232473\n760  1999                           New York  1274162\n761  2000                           New York  1244746\n762  2001                           New York  1171898\n763  2002                           New York  1199632\n764  2003                           New York  1101618\n765  2004                           New York  1098056\n766  2005                           New York  1080215\n767  2006                           New York  1097160\n768  2007                           New York  1187059\n769  2008                           New York  1180356\n770  2009                           New York  1142625\n771  2010                           New York  1198127\n772  2011                           New York  1217324\n773  2012                           New York  1223036\n774  2013                           New York  1273263\n775  2014                           New York  1349203\n776  2015                           New York  1353385\n777  2016                           New York  1296270\n778  2017                           New York  1237311\n779  2018                           New York  1350443\n780  2019                           New York  1312031\n781  1997                     North Carolina   215634\n782  1998                     North Carolina   214092\n783  1999                     North Carolina   217159\n784  2000                     North Carolina   233714\n785  2001                     North Carolina   207108\n786  2002                     North Carolina   235376\n787  2003                     North Carolina   218642\n788  2004                     North Carolina   224796\n789  2005                     North Carolina   229715\n790  2006                     North Carolina   223032\n791  2007                     North Carolina   237354\n792  2008                     North Carolina   243090\n793  2009                     North Carolina   247047\n794  2010                     North Carolina   304148\n795  2011                     North Carolina   307804\n796  2012                     North Carolina   363945\n797  2013                     North Carolina   440175\n798  2014                     North Carolina   452780\n799  2015                     North Carolina   498576\n800  2016                     North Carolina   522002\n801  2017                     North Carolina   502567\n802  2018                     North Carolina   582418\n803  2019                     North Carolina   556490\n804  1997                       North Dakota    56179\n805  1998                       North Dakota    49541\n806  1999                       North Dakota    56418\n807  2000                       North Dakota    56528\n808  2001                       North Dakota    60819\n809  2002                       North Dakota    66726\n810  2003                       North Dakota    60907\n811  2004                       North Dakota    59986\n812  2005                       North Dakota    53050\n813  2006                       North Dakota    53336\n814  2007                       North Dakota    59453\n815  2008                       North Dakota    63097\n816  2009                       North Dakota    54564\n817  2010                       North Dakota    66395\n818  2011                       North Dakota    72463\n819  2012                       North Dakota    72740\n820  2013                       North Dakota    81593\n821  2014                       North Dakota    86881\n822  2015                       North Dakota    97725\n823  2016                       North Dakota   102322\n824  2017                       North Dakota   109440\n825  2018                       North Dakota   126325\n826  2019                       North Dakota   134722\n827  1997                               Ohio   897693\n828  1998                               Ohio   811384\n829  1999                               Ohio   841966\n830  2000                               Ohio   890962\n831  2001                               Ohio   804243\n832  2002                               Ohio   830955\n833  2003                               Ohio   848388\n834  2004                               Ohio   825753\n835  2005                               Ohio   825961\n836  2006                               Ohio   742359\n837  2007                               Ohio   806350\n838  2008                               Ohio   792247\n839  2009                               Ohio   740925\n840  2010                               Ohio   784293\n841  2011                               Ohio   823548\n842  2012                               Ohio   842959\n843  2013                               Ohio   912403\n844  2014                               Ohio  1002345\n845  2015                               Ohio   966492\n846  2016                               Ohio   928492\n847  2017                               Ohio   948324\n848  2018                               Ohio  1162745\n849  2019                               Ohio  1179077\n850  1997                           Oklahoma   567050\n851  1998                           Oklahoma   575855\n852  1999                           Oklahoma   538329\n853  2000                           Oklahoma   538563\n854  2001                           Oklahoma   491458\n855  2002                           Oklahoma   508298\n856  2003                           Oklahoma   540103\n857  2004                           Oklahoma   538576\n858  2005                           Oklahoma   582536\n859  2006                           Oklahoma   624400\n860  2007                           Oklahoma   658379\n861  2008                           Oklahoma   687989\n862  2009                           Oklahoma   659305\n863  2010                           Oklahoma   675727\n864  2011                           Oklahoma   655919\n865  2012                           Oklahoma   691661\n866  2013                           Oklahoma   658569\n867  2014                           Oklahoma   642309\n868  2015                           Oklahoma   679457\n869  2016                           Oklahoma   701776\n870  2017                           Oklahoma   664233\n871  2018                           Oklahoma   807023\n872  2019                           Oklahoma   835139\n873  1997                             Oregon   185069\n874  1998                             Oregon   229403\n875  1999                             Oregon   235009\n876  2000                             Oregon   224888\n877  2001                             Oregon   229665\n878  2002                             Oregon   202164\n879  2003                             Oregon   212556\n880  2004                             Oregon   234997\n881  2005                             Oregon   232562\n882  2006                             Oregon   222608\n883  2007                             Oregon   251927\n884  2008                             Oregon   268484\n885  2009                             Oregon   248864\n886  2010                             Oregon   239325\n887  2011                             Oregon   199419\n888  2012                             Oregon   215830\n889  2013                             Oregon   240418\n890  2014                             Oregon   220090\n891  2015                             Oregon   234634\n892  2016                             Oregon   235912\n893  2017                             Oregon   247206\n894  2018                             Oregon   255713\n895  2019                             Oregon   288976\n896  1997                       Pennsylvania   706230\n897  1998                       Pennsylvania   644017\n898  1999                       Pennsylvania   688740\n899  2000                       Pennsylvania   702847\n900  2001                       Pennsylvania   634794\n901  2002                       Pennsylvania   675583\n902  2003                       Pennsylvania   689992\n903  2004                       Pennsylvania   696175\n904  2005                       Pennsylvania   691591\n905  2006                       Pennsylvania   659754\n906  2007                       Pennsylvania   752401\n907  2008                       Pennsylvania   749884\n908  2009                       Pennsylvania   809707\n909  2010                       Pennsylvania   879365\n910  2011                       Pennsylvania   965742\n911  2012                       Pennsylvania  1037979\n912  2013                       Pennsylvania  1121696\n913  2014                       Pennsylvania  1244371\n914  2015                       Pennsylvania  1255621\n915  2016                       Pennsylvania  1301000\n916  2017                       Pennsylvania  1350245\n917  2018                       Pennsylvania  1460456\n918  2019                       Pennsylvania  1612589\n919  1997                       Rhode Island   117707\n920  1998                       Rhode Island   130751\n921  1999                       Rhode Island   118001\n922  2000                       Rhode Island    88419\n923  2001                       Rhode Island    95607\n924  2002                       Rhode Island    87805\n925  2003                       Rhode Island    78456\n926  2004                       Rhode Island    72609\n927  2005                       Rhode Island    80764\n928  2006                       Rhode Island    77204\n929  2007                       Rhode Island    87972\n930  2008                       Rhode Island    89256\n931  2009                       Rhode Island    92743\n932  2010                       Rhode Island    94110\n933  2011                       Rhode Island   100455\n934  2012                       Rhode Island    95476\n935  2013                       Rhode Island    85537\n936  2014                       Rhode Island    88886\n937  2015                       Rhode Island    93886\n938  2016                       Rhode Island    85977\n939  2017                       Rhode Island    92061\n940  2018                       Rhode Island   101796\n941  2019                       Rhode Island    99301\n942  1997                     South Carolina   153917\n943  1998                     South Carolina   159458\n944  1999                     South Carolina   162926\n945  2000                     South Carolina   160436\n946  2001                     South Carolina   141785\n947  2002                     South Carolina   184803\n948  2003                     South Carolina   146641\n949  2004                     South Carolina   163787\n950  2005                     South Carolina   172032\n951  2006                     South Carolina   174806\n952  2007                     South Carolina   175701\n953  2008                     South Carolina   170077\n954  2009                     South Carolina   190928\n955  2010                     South Carolina   220235\n956  2011                     South Carolina   229497\n957  2012                     South Carolina   244850\n958  2013                     South Carolina   232297\n959  2014                     South Carolina   230525\n960  2015                     South Carolina   275751\n961  2016                     South Carolina   275946\n962  2017                     South Carolina   278768\n963  2018                     South Carolina   330362\n964  2019                     South Carolina   337310\n965  1997                       South Dakota    36115\n966  1998                       South Dakota    33042\n967  1999                       South Dakota    35794\n968  2000                       South Dakota    37939\n969  2001                       South Dakota    37077\n970  2002                       South Dakota    41577\n971  2003                       South Dakota    43881\n972  2004                       South Dakota    41679\n973  2005                       South Dakota    42555\n974  2006                       South Dakota    40739\n975  2007                       South Dakota    53938\n976  2008                       South Dakota    65258\n977  2009                       South Dakota    66185\n978  2010                       South Dakota    72563\n979  2011                       South Dakota    73605\n980  2012                       South Dakota    70238\n981  2013                       South Dakota    81986\n982  2014                       South Dakota    80613\n983  2015                       South Dakota    79099\n984  2016                       South Dakota    80513\n985  2017                       South Dakota    80890\n986  2018                       South Dakota    89464\n987  2019                       South Dakota    91362\n988  1997                          Tennessee   282395\n989  1998                          Tennessee   279070\n990  1999                          Tennessee   278841\n991  2000                          Tennessee   270658\n992  2001                          Tennessee   255990\n993  2002                          Tennessee   255515\n994  2003                          Tennessee   257315\n995  2004                          Tennessee   231133\n996  2005                          Tennessee   230338\n997  2006                          Tennessee   221626\n998  2007                          Tennessee   221118\n999  2008                          Tennessee   229935\n1000 2009                          Tennessee   216945\n1001 2010                          Tennessee   257443\n1002 2011                          Tennessee   264231\n1003 2012                          Tennessee   277127\n1004 2013                          Tennessee   279441\n1005 2014                          Tennessee   305633\n1006 2015                          Tennessee   313379\n1007 2016                          Tennessee   326546\n1008 2017                          Tennessee   321644\n1009 2018                          Tennessee   392161\n1010 2019                          Tennessee   402277\n1011 1997                              Texas  4116722\n1012 1998                              Texas  4205459\n1013 1999                              Texas  4009689\n1014 2000                              Texas  4421777\n1015 2001                              Texas  4252152\n1016 2002                              Texas  4303831\n1017 2003                              Texas  4050632\n1018 2004                              Texas  3908243\n1019 2005                              Texas  3503636\n1020 2006                              Texas  3432236\n1021 2007                              Texas  3516706\n1022 2008                              Texas  3546804\n1023 2009                              Texas  3387341\n1024 2010                              Texas  3574398\n1025 2011                              Texas  3693905\n1026 2012                              Texas  3850331\n1027 2013                              Texas  4021851\n1028 2014                              Texas  3928277\n1029 2015                              Texas  4113608\n1030 2016                              Texas  4020915\n1031 2017                              Texas  3867275\n1032 2018                              Texas  4464219\n1033 2019                              Texas  4619800\n1034 1949                               U.S.  4971152\n1035 1950                               U.S.  5766542\n1036 1951                               U.S.  6810162\n1037 1952                               U.S.  7294320\n1038 1953                               U.S.  7639270\n1039 1954                               U.S.  8048504\n1040 1955                               U.S.  8693657\n1041 1956                               U.S.  9288865\n1042 1957                               U.S.  9846139\n1043 1958                               U.S. 10302608\n1044 1959                               U.S. 11321181\n1045 1960                               U.S. 11966537\n1046 1961                               U.S. 12489268\n1047 1962                               U.S. 13266513\n1048 1963                               U.S. 13970229\n1049 1964                               U.S. 14813808\n1050 1965                               U.S. 15279716\n1051 1966                               U.S. 16452403\n1052 1967                               U.S. 17388360\n1053 1968                               U.S. 18632062\n1054 1969                               U.S. 20056240\n1055 1970                               U.S. 21139386\n1056 1971                               U.S. 21793454\n1057 1972                               U.S. 22101451\n1058 1973                               U.S. 22049363\n1059 1974                               U.S. 21223133\n1060 1975                               U.S. 19537593\n1061 1976                               U.S. 19946496\n1062 1977                               U.S. 19520581\n1063 1978                               U.S. 19627478\n1064 1979                               U.S. 20240761\n1065 1980                               U.S. 19877293\n1066 1981                               U.S. 19403858\n1067 1982                               U.S. 18001055\n1068 1983                               U.S. 16834912\n1069 1984                               U.S. 17950527\n1070 1985                               U.S. 17280943\n1071 1986                               U.S. 16221296\n1072 1987                               U.S. 17210809\n1073 1988                               U.S. 18029585\n1074 1989                               U.S. 19118997\n1075 1990                               U.S. 19173556\n1076 1991                               U.S. 19562067\n1077 1992                               U.S. 20228228\n1078 1993                               U.S. 20789842\n1079 1994                               U.S. 21247098\n1080 1995                               U.S. 22206889\n1081 1996                               U.S. 22609080\n1082 1997                               U.S. 22737342\n1083 1998                               U.S. 22245956\n1084 1999                               U.S. 22405151\n1085 2000                               U.S. 23333121\n1086 2001                               U.S. 22238624\n1087 2002                               U.S. 23027021\n1088 2003                               U.S. 22276502\n1089 2004                               U.S. 22402546\n1090 2005                               U.S. 22014434\n1091 2006                               U.S. 21699071\n1092 2007                               U.S. 23103793\n1093 2008                               U.S. 23277008\n1094 2009                               U.S. 22910078\n1095 2010                               U.S. 24086797\n1096 2011                               U.S. 24477425\n1097 2012                               U.S. 25538487\n1098 2013                               U.S. 26155071\n1099 2014                               U.S. 26593375\n1100 2015                               U.S. 27243858\n1101 2016                               U.S. 27444220\n1102 2017                               U.S. 27139699\n1103 2018                               U.S. 30138930\n1104 2019                               U.S. 31099061\n1105 2020                               U.S. 30482049\n1106 1997                               Utah   165253\n1107 1998                               Utah   169776\n1108 1999                               Utah   159889\n1109 2000                               Utah   164557\n1110 2001                               Utah   159299\n1111 2002                               Utah   163379\n1112 2003                               Utah   154125\n1113 2004                               Utah   155891\n1114 2005                               Utah   160275\n1115 2006                               Utah   187399\n1116 2007                               Utah   219700\n1117 2008                               Utah   224188\n1118 2009                               Utah   214220\n1119 2010                               Utah   219213\n1120 2011                               Utah   222227\n1121 2012                               Utah   223039\n1122 2013                               Utah   247285\n1123 2014                               Utah   241737\n1124 2015                               Utah   232612\n1125 2016                               Utah   240114\n1126 2017                               Utah   221834\n1127 2018                               Utah   244058\n1128 2019                               Utah   264046\n1129 1997                            Vermont     8061\n1130 1998                            Vermont     7735\n1131 1999                            Vermont     8033\n1132 2000                            Vermont    10426\n1133 2001                            Vermont     7919\n1134 2002                            Vermont     8367\n1135 2003                            Vermont     8400\n1136 2004                            Vermont     8685\n1137 2005                            Vermont     8372\n1138 2006                            Vermont     8056\n1139 2007                            Vermont     8867\n1140 2008                            Vermont     8624\n1141 2009                            Vermont     8638\n1142 2010                            Vermont     8443\n1143 2011                            Vermont     8611\n1144 2012                            Vermont     8191\n1145 2013                            Vermont     9602\n1146 2014                            Vermont    10677\n1147 2015                            Vermont    11950\n1148 2016                            Vermont    12094\n1149 2017                            Vermont    11926\n1150 2018                            Vermont    13742\n1151 2019                            Vermont    13866\n1152 1997                           Virginia   248960\n1153 1998                           Virginia   260332\n1154 1999                           Virginia   276793\n1155 2000                           Virginia   268770\n1156 2001                           Virginia   237853\n1157 2002                           Virginia   258202\n1158 2003                           Virginia   262970\n1159 2004                           Virginia   277434\n1160 2005                           Virginia   299746\n1161 2006                           Virginia   274175\n1162 2007                           Virginia   319913\n1163 2008                           Virginia   299364\n1164 2009                           Virginia   319134\n1165 2010                           Virginia   375421\n1166 2011                           Virginia   373444\n1167 2012                           Virginia   410106\n1168 2013                           Virginia   418506\n1169 2014                           Virginia   419705\n1170 2015                           Virginia   500477\n1171 2016                           Virginia   543343\n1172 2017                           Virginia   566676\n1173 2018                           Virginia   634162\n1174 2019                           Virginia   684597\n1175 1997                         Washington   256366\n1176 1998                         Washington   290229\n1177 1999                         Washington   287302\n1178 2000                         Washington   286653\n1179 2001                         Washington   312114\n1180 2002                         Washington   233716\n1181 2003                         Washington   249599\n1182 2004                         Washington   262485\n1183 2005                         Washington   264754\n1184 2006                         Washington   263395\n1185 2007                         Washington   272613\n1186 2008                         Washington   298140\n1187 2009                         Washington   310428\n1188 2010                         Washington   285726\n1189 2011                         Washington   264589\n1190 2012                         Washington   264540\n1191 2013                         Washington   318292\n1192 2014                         Washington   306675\n1193 2015                         Washington   307735\n1194 2016                         Washington   301418\n1195 2017                         Washington   324882\n1196 2018                         Washington   307985\n1197 2019                         Washington   345210\n1198 1997                      West Virginia   159504\n1199 1998                      West Virginia   142860\n1200 1999                      West Virginia   139961\n1201 2000                      West Virginia   147854\n1202 2001                      West Virginia   141090\n1203 2002                      West Virginia   146455\n1204 2003                      West Virginia   126986\n1205 2004                      West Virginia   122267\n1206 2005                      West Virginia   117136\n1207 2006                      West Virginia   113084\n1208 2007                      West Virginia   115974\n1209 2008                      West Virginia   111480\n1210 2009                      West Virginia   109652\n1211 2010                      West Virginia   113179\n1212 2011                      West Virginia   115361\n1213 2012                      West Virginia   129753\n1214 2013                      West Virginia   142082\n1215 2014                      West Virginia   165341\n1216 2015                      West Virginia   174165\n1217 2016                      West Virginia   171825\n1218 2017                      West Virginia   184025\n1219 2018                      West Virginia   202934\n1220 2019                      West Virginia   218282\n1221 1997                          Wisconsin   400651\n1222 1998                          Wisconsin   368022\n1223 1999                          Wisconsin   380560\n1224 2000                          Wisconsin   393601\n1225 2001                          Wisconsin   359784\n1226 2002                          Wisconsin   385310\n1227 2003                          Wisconsin   394711\n1228 2004                          Wisconsin   383316\n1229 2005                          Wisconsin   410250\n1230 2006                          Wisconsin   372462\n1231 2007                          Wisconsin   398370\n1232 2008                          Wisconsin   409377\n1233 2009                          Wisconsin   387066\n1234 2010                          Wisconsin   372898\n1235 2011                          Wisconsin   393734\n1236 2012                          Wisconsin   402656\n1237 2013                          Wisconsin   442544\n1238 2014                          Wisconsin   463186\n1239 2015                          Wisconsin   457743\n1240 2016                          Wisconsin   482233\n1241 2017                          Wisconsin   487732\n1242 2018                          Wisconsin   543025\n1243 2019                          Wisconsin   576650\n1244 1997                            Wyoming   100950\n1245 1998                            Wyoming   109188\n1246 1999                            Wyoming    96726\n1247 2000                            Wyoming   101314\n1248 2001                            Wyoming    98569\n1249 2002                            Wyoming   112872\n1250 2003                            Wyoming   115358\n1251 2004                            Wyoming   107060\n1252 2005                            Wyoming   108314\n1253 2006                            Wyoming   108481\n1254 2007                            Wyoming   140912\n1255 2008                            Wyoming   142705\n1256 2009                            Wyoming   142793\n1257 2010                            Wyoming   150106\n1258 2011                            Wyoming   156455\n1259 2012                            Wyoming   153333\n1260 2013                            Wyoming   149820\n1261 2014                            Wyoming   136796\n1262 2015                            Wyoming   119265\n1263 2016                            Wyoming   123351\n1264 2017                            Wyoming   149405\n1265 2018                            Wyoming   165384\n1266 2019                            Wyoming   154836\n\nus_total &lt;- us_total |&gt;\n  as_tsibble(index = year, key = state) \n  \nus_total |&gt; \n  filter(state %in% c(\"Maine\", \"Vermont\", \"New Hampshire\", \"Massachusetts\", \"Connecticut\", \"Rhode Island\")) |&gt; \n  ggplot(aes(x = year, y = y, colour = state)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\ntourism\n\n# A tsibble: 24,320 x 5 [1Q]\n# Key:       Region, State, Purpose [304]\n   Quarter Region   State           Purpose  Trips\n     &lt;qtr&gt; &lt;chr&gt;    &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt;\n 1 1998 Q1 Adelaide South Australia Business  135.\n 2 1998 Q2 Adelaide South Australia Business  110.\n 3 1998 Q3 Adelaide South Australia Business  166.\n 4 1998 Q4 Adelaide South Australia Business  127.\n 5 1999 Q1 Adelaide South Australia Business  137.\n 6 1999 Q2 Adelaide South Australia Business  200.\n 7 1999 Q3 Adelaide South Australia Business  169.\n 8 1999 Q4 Adelaide South Australia Business  134.\n 9 2000 Q1 Adelaide South Australia Business  154.\n10 2000 Q2 Adelaide South Australia Business  169.\n# ℹ 24,310 more rows\n\ntourism2 &lt;- readxl::read_excel((\"Data/tourism.xlsx\"))\n\n# Create a tsibble which is identical to the tourism tsibble from the tsibble package.\ntourism2 &lt;- tourism2 |&gt; \n  mutate(Quarter = yearquarter(Quarter)) |&gt;\n  as_tsibble(index = Quarter, key = c(Region, State, Purpose))\n\n# Find what combination of Region and Purpose had the maximum number of overnight trips on average.\ntourism2 |&gt; \n  group_by(Region, Purpose) |&gt; \n  mutate(max_trips = max(Trips)) |&gt; \n  filter(Trips == max_trips) |&gt; \n  arrange(desc(max_trips))\n\n# A tsibble: 304 x 6 [1Q]\n# Key:       Region, State, Purpose [304]\n# Groups:    Region, Purpose [304]\n   Quarter Region          State           Purpose  Trips max_trips\n     &lt;qtr&gt; &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 2017 Q4 Melbourne       Victoria        Visiting  985.      985.\n 2 2001 Q4 Sydney          New South Wales Business  948.      948.\n 3 2016 Q4 Sydney          New South Wales Visiting  921.      921.\n 4 1998 Q1 South Coast     New South Wales Holiday   915.      915.\n 5 2016 Q1 North Coast NSW New South Wales Holiday   906.      906.\n 6 1998 Q1 Sydney          New South Wales Holiday   828.      828.\n 7 2017 Q4 Melbourne       Victoria        Holiday   806.      806.\n 8 2016 Q4 Brisbane        Queensland      Visiting  796.      796.\n 9 2002 Q1 Gold Coast      Queensland      Holiday   711.      711.\n10 2017 Q3 Melbourne       Victoria        Business  704.      704.\n# ℹ 294 more rows\n\n# state_tourism0 &lt;- tourism2 |&gt; \n#   unite(Region_Purpose, Region, Purpose, sep = \" \") |&gt; \n#   group_by(Region_Purpose, State) |&gt; \n#   summarise(total = sum(Trips)) |&gt; \n#   group_by(State) |&gt; \n#   summarise(State_Total = sum(total))\n\n# Create a new tsibble which combines the Purposes and Regions, and just has total trips by State.\nstate_tourism &lt;- tourism2 |&gt; \n  group_by(State) |&gt; \n  summarise(State_Total = sum(Trips)) \nstate_tourism \n\n# A tsibble: 640 x 3 [1Q]\n# Key:       State [8]\n   State Quarter State_Total\n   &lt;chr&gt;   &lt;qtr&gt;       &lt;dbl&gt;\n 1 ACT   1998 Q1        551.\n 2 ACT   1998 Q2        416.\n 3 ACT   1998 Q3        436.\n 4 ACT   1998 Q4        450.\n 5 ACT   1999 Q1        379.\n 6 ACT   1999 Q2        558.\n 7 ACT   1999 Q3        449.\n 8 ACT   1999 Q4        595.\n 9 ACT   2000 Q1        600.\n10 ACT   2000 Q2        557.\n# ℹ 630 more rows\n\n# If not starting with a tsibble\nstate_tourism &lt;- tourism2 |&gt; \n  group_by(State) |&gt; \n  summarise(State_Total = sum(Trips)) |&gt; \n  mutate(Quarter = yearquarter(Quarter)) |&gt; \n  as_tsibble(index = Quarter, key = State)\nstate_tourism \n\n# A tsibble: 640 x 3 [1Q]\n# Key:       State [8]\n   State Quarter State_Total\n   &lt;chr&gt;   &lt;qtr&gt;       &lt;dbl&gt;\n 1 ACT   1998 Q1        551.\n 2 ACT   1998 Q2        416.\n 3 ACT   1998 Q3        436.\n 4 ACT   1998 Q4        450.\n 5 ACT   1999 Q1        379.\n 6 ACT   1999 Q2        558.\n 7 ACT   1999 Q3        449.\n 8 ACT   1999 Q4        595.\n 9 ACT   2000 Q1        600.\n10 ACT   2000 Q2        557.\n# ℹ 630 more rows\n\n\n\nThe aus_arrivals data set comprises quarterly international arrivals to Australia from Japan, New Zealand, UK and the US.\n\n\n# Use autoplot(), gg_season() and gg_subseries() to compare the differences between the arrivals from these four countries.\n\naus_arrivals\n\n# A tsibble: 508 x 3 [1Q]\n# Key:       Origin [4]\n   Quarter Origin Arrivals\n     &lt;qtr&gt; &lt;chr&gt;     &lt;int&gt;\n 1 1981 Q1 Japan     14763\n 2 1981 Q2 Japan      9321\n 3 1981 Q3 Japan     10166\n 4 1981 Q4 Japan     19509\n 5 1982 Q1 Japan     17117\n 6 1982 Q2 Japan     10617\n 7 1982 Q3 Japan     11737\n 8 1982 Q4 Japan     20961\n 9 1983 Q1 Japan     20671\n10 1983 Q2 Japan     12235\n# ℹ 498 more rows\n\naus_arrivals |&gt; \n  autoplot(Arrivals)\n\n\n\n\n\n\n\naus_arrivals |&gt; \n  gg_season(Arrivals)\n\n\n\n\n\n\n\naus_arrivals |&gt; \n  gg_subseries(Arrivals)\n\n\n\n\n\n\n\n# Travel from Japan to Australia increased from 1980 to the mid-90s, but then declined. Travel from NZ, the UK, and the US has increased over time, kind of independent of season, expect for maybe Q2 and Q3 for the UK. This seasonality for the UK may be driven by more recent years. Unusual?\n\n\nMonthly Australian retail data is provided in aus_retail. Select one of the time series as follows (but choose your own seed value):\n\n\nset.seed(12345678)\nmyseries &lt;- aus_retail |&gt;\n  filter(`Series ID` == sample(aus_retail$`Series ID`,1))\n\nset.seed(818)\nmyseries &lt;- aus_retail |&gt;\n  filter(`Series ID` == sample(aus_retail$`Series ID`,1))\n# Other specialized food retailing\n\nmyseries |&gt; \n  autoplot(Turnover)\n\n\n\n\n\n\n\n# I see an obviously increasing trend and maybe cyclicity, but there is not any obvious seasonality. \nmyseries |&gt; \n  gg_season(Turnover)\n\n\n\n\n\n\n\n# Again not seeing a seasonality, but there is increased variability in the later years.\n\nmyseries |&gt; \n  gg_subseries(Turnover)\n\n\n\n\n\n\n\n# Only seasonality is just a small uptick in December maybe related to more shopping during the holidays. There turnover for these items reached their peak in early 2000's, but then decreased.\n\nmyseries |&gt; \n  gg_lag(Turnover)\n\n\n\n\n\n\n\nmyseries |&gt;\n  ACF(Turnover) |&gt; autoplot()\n\n\n\n\n\n\n\n# Just annual cycles?\n\n\nUsing graphing functions\n\n\n# Exploring US Employment Data\nus_employment\n\n# A tsibble: 143,412 x 4 [1M]\n# Key:       Series_ID [148]\n      Month Series_ID     Title         Employed\n      &lt;mth&gt; &lt;chr&gt;         &lt;chr&gt;            &lt;dbl&gt;\n 1 1939 Jan CEU0500000001 Total Private    25338\n 2 1939 Feb CEU0500000001 Total Private    25447\n 3 1939 Mar CEU0500000001 Total Private    25833\n 4 1939 Apr CEU0500000001 Total Private    25801\n 5 1939 May CEU0500000001 Total Private    26113\n 6 1939 Jun CEU0500000001 Total Private    26485\n 7 1939 Jul CEU0500000001 Total Private    26481\n 8 1939 Aug CEU0500000001 Total Private    26848\n 9 1939 Sep CEU0500000001 Total Private    27468\n10 1939 Oct CEU0500000001 Total Private    27830\n# ℹ 143,402 more rows\n\nus_employment |&gt; \n  filter(Title == \"Total Private\") |&gt; \n  autoplot(Employed)\n\n\n\n\n\n\n\n# Increasing trend, some seasonality and cylcing.\n\nus_employment |&gt; \n  filter(Title == \"Total Private\") |&gt; \n  gg_season(Employed)\n\n\n\n\n\n\n\nus_employment |&gt; \n  filter(Title == \"Total Private\") |&gt; \n  gg_subseries(Employed)\n\n\n\n\n\n\n\n# Seasonality is not as obvious as initially thought\n\nus_employment |&gt; \n  filter(Title == \"Total Private\") |&gt; \n  gg_lag(Employed)\n\n\n\n\n\n\n\ntotal_private&lt;- us_employment |&gt; \n  filter(Title == \"Total Private\")\n\ntotal_private |&gt;\n  ACF(Employed) |&gt; autoplot()\n\n\n\n\n\n\n\n# Data is mostly trended\n\n\n# Exploring Pelt Data --------\n\npelt\n\n# A tsibble: 91 x 3 [1Y]\n    Year  Hare  Lynx\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1845 19580 30090\n 2  1846 19600 45150\n 3  1847 19610 49150\n 4  1848 11990 39520\n 5  1849 28040 21230\n 6  1850 58000  8420\n 7  1851 74600  5560\n 8  1852 75090  5080\n 9  1853 88480 10170\n10  1854 61280 19600\n# ℹ 81 more rows\n\npelt |&gt; \n  ggplot() +\n  geom_line(aes(x = Year, y = Hare), colour = \"grey\")+\n  geom_line(aes(x = Year, y = Lynx), colour = \"black\")\n\n\n\n\n\n\n\npelt |&gt; \n  autoplot(Hare)\n\n\n\n\n\n\n\n# Annual data, so these can't be run\n# pelt |&gt; \n#   gg_season(Hare)\n# \n# pelt |&gt; \n#   gg_subseries(Hare)\n\npelt |&gt; \n  gg_lag(Hare, geom = \"point\")\n\n\n\n\n\n\n\npelt |&gt;\n  ACF(Hare) |&gt; autoplot()\n\n\n\n\n\n\n\n# 10 year cyclical behavior. Negative signigicant negative relationship between year 4-6.\n\npelt |&gt;\n  ACF(Lynx) |&gt; autoplot()\n\n\n\n\n\n\n\n# Follows similar pattern to hares, by the acf values are much higher\n\n\nThe following time plots and ACF plots correspond to four different time series. Your task is to match each time plot in the first row with one of the ACF plots in the second row.\n\n3 - D, 1 - B, 2 - A, 4 - C\n\nThe aus_livestock data contains the monthly total number of pigs slaughtered in Victoria, Australia, from Jul 1972 to Dec 2018. Use filter() to extract pig slaughters in Victoria between 1990 and 1995. Use autoplot() and ACF() for this data. How do they differ from white noise? If a longer period of data is used, what difference does it make to the ACF?\n\n\naus_livestock\n\n# A tsibble: 29,364 x 4 [1M]\n# Key:       Animal, State [54]\n      Month Animal                     State                        Count\n      &lt;mth&gt; &lt;fct&gt;                      &lt;fct&gt;                        &lt;dbl&gt;\n 1 1976 Jul Bulls, bullocks and steers Australian Capital Territory  2300\n 2 1976 Aug Bulls, bullocks and steers Australian Capital Territory  2100\n 3 1976 Sep Bulls, bullocks and steers Australian Capital Territory  2100\n 4 1976 Oct Bulls, bullocks and steers Australian Capital Territory  1900\n 5 1976 Nov Bulls, bullocks and steers Australian Capital Territory  2100\n 6 1976 Dec Bulls, bullocks and steers Australian Capital Territory  1800\n 7 1977 Jan Bulls, bullocks and steers Australian Capital Territory  1800\n 8 1977 Feb Bulls, bullocks and steers Australian Capital Territory  1900\n 9 1977 Mar Bulls, bullocks and steers Australian Capital Territory  2700\n10 1977 Apr Bulls, bullocks and steers Australian Capital Territory  2300\n# ℹ 29,354 more rows\n\naus_livestock&lt;-aus_livestock\n\nvictoria_pigs&lt;-aus_livestock |&gt; \n  filter(Animal == \"Pigs\") |&gt; \n  filter(State == \"Victoria\") |&gt; \n  mutate(Year = year(Month)) |&gt; \n  filter(Year &gt;= 1990 & Year &lt;= 1995)\n\n\nvictoria_pigs |&gt;\n  autoplot()\n\nPlot variable not specified, automatically selected `.vars = Count`\n\n\n\n\n\n\n\n\n# Upwards trend\n\nvictoria_pigs |&gt;\n  gg_season()\n\nPlot variable not specified, automatically selected `y = Count`\n\n\n\n\n\n\n\n\nvictoria_pigs |&gt;\n  gg_subseries()\n\nPlot variable not specified, automatically selected `y = Count`\n\n\n\n\n\n\n\n\nvictoria_pigs |&gt;\n  ACF(Count) |&gt; autoplot()\n\n\n\n\n\n\n\n# This series is different from white noise in that may of the spike fall outside of the confidence band. \n\n\n\n\n\ndgoog &lt;- gafa_stock |&gt;\n  filter(Symbol == \"GOOG\", year(Date) &gt;= 2018) |&gt;\n  mutate(trading_day = row_number()) |&gt;\n  update_tsibble(index = trading_day, regular = TRUE) |&gt;\n  mutate(diff = difference(Close))\n\n# Why was it necessary to re-index the tsibble?\n# Data is not collected on the weekends, which make the time series non-continuous so we re-index using trading days instead.\n\n# Plot these differences and their ACF.\ndgoog |&gt; \n  autoplot(diff)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\ndgoog |&gt; \n  ACF(diff) |&gt; \n  autoplot()\n\n\n\n\n\n\n\n# Do the changes in the stock prices look like white noise?\n# Gerernally changes in stock prices look like white noise since they alll fall in under the confidence band\n\n\n\n3. Chapter 3 -Time series decomposition (Notes)\n\n\n4. Chapter 3 - Exercises\n\nConsider the GDP information in global_economy. Plot the GDP per capita for each country over time. Which country has the highest GDP per capita? How has this changed over time?\n\n\nglobal_economy\n\n# A tsibble: 15,150 x 9 [1Y]\n# Key:       Country [263]\n   Country     Code   Year         GDP Growth   CPI Imports Exports Population\n   &lt;fct&gt;       &lt;fct&gt; &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n 1 Afghanistan AFG    1960  537777811.     NA    NA    7.02    4.13    8996351\n 2 Afghanistan AFG    1961  548888896.     NA    NA    8.10    4.45    9166764\n 3 Afghanistan AFG    1962  546666678.     NA    NA    9.35    4.88    9345868\n 4 Afghanistan AFG    1963  751111191.     NA    NA   16.9     9.17    9533954\n 5 Afghanistan AFG    1964  800000044.     NA    NA   18.1     8.89    9731361\n 6 Afghanistan AFG    1965 1006666638.     NA    NA   21.4    11.3     9938414\n 7 Afghanistan AFG    1966 1399999967.     NA    NA   18.6     8.57   10152331\n 8 Afghanistan AFG    1967 1673333418.     NA    NA   14.2     6.77   10372630\n 9 Afghanistan AFG    1968 1373333367.     NA    NA   15.2     8.90   10604346\n10 Afghanistan AFG    1969 1408888922.     NA    NA   15.0    10.1    10854428\n# ℹ 15,140 more rows\n\nglobal_economy |&gt; \n  mutate(GDP_per_capita = GDP/Population) |&gt; \n  autoplot(GDP_per_capita)+\n  theme(legend.position = \"none\")\n\nWarning: Removed 3242 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\nFor each of the following series, make a graph of the data. If transforming seems appropriate, do so and describe the effect.\n\n\n# United States GDP from global_economy.\nglobal_economy |&gt; \n  mutate(GDP_per_capita = GDP/Population) |&gt; \n  filter(Country == \"United States\") |&gt; \n  autoplot(GDP_per_capita)\n\n\n\n\n\n\n\n# Slaughter of Victorian “Bulls, bullocks and steers” in aus_livestock\naus_livestock |&gt; \n  filter(Animal == \"Bulls, bullocks and steers\") |&gt; \n  filter(State == \"Victoria\") |&gt; \n  autoplot(Count)\n\n\n\n\n\n\n\n# Accounting for days in the month\naus_livestock |&gt; \n  filter(Animal == \"Bulls, bullocks and steers\") |&gt; \n  filter(State == \"Victoria\")|&gt; \n  mutate(days = days_in_month(Month)) |&gt; \n  mutate(count_adj = Count/days) |&gt; \n  autoplot(count_adj)\n\n\n\n\n\n\n\n# Trend are still similar, they just be a little more accurate\n\n# Victorian Electricity Demand from vic_elec\nvic_elec |&gt; \n  autoplot(Demand)\n\n\n\n\n\n\n\n# Gas production from aus_production\naus_production |&gt; \n  autoplot(Gas)\n\n\n\n\n\n\n\naus_production |&gt; \n  autoplot(log(Gas))\n\n\n\n\n\n\n\n\n\nWhy is a Box-Cox transformation unhelpful for the canadian_gas data?\n\n\naus_production |&gt; \n  autoplot(Gas)\n\n\n\n\n\n\n\ncanadian_gas |&gt; \n  autoplot()\n\nPlot variable not specified, automatically selected `.vars = Volume`\n\n\n\n\n\n\n\n\n# Variability is somewhat stable? Differences among years tend to be due to an increasing trend ans seasonality.\n\n\nWhat Box-Cox transformation would you select for your retail data (from Exercise 7 in Section 2.10)?\n\n\nmyseries |&gt; \n  autoplot(Turnover)\n\n\n\n\n\n\n\nmyseries |&gt; \n  autoplot(log(Turnover))\n\n\n\n\n\n\n\n# Nope\n\nmyseries |&gt; \n  autoplot(sqrt(Turnover))\n\n\n\n\n\n\n\n# Nope\n\n# A good value of lambda is one that makes the size of the seasonal variation similar across the whole time series \n\nlambda&lt;-myseries |&gt; \n  features(Turnover, features = guerrero) |&gt; \n  pull(lambda_guerrero)\n\nmyseries |&gt; \n  autoplot(box_cox(Turnover, lambda))+\n  labs(y = \"\", title = latex2exp::TeX(paste0(\"Transformed Turnover with $\\\\lambda$ = \", round(lambda,2)))) \n\n\n\n\n\n\n\n# Seems better\n# Negative lambda is suggested when variance decreases as the mean increases?\n\n# Let's explore others\n\nmyseries |&gt; \n  mutate(\n    turnover_lambda0 = box_cox(Turnover, 0), # log-transform\n    turnover_lambda05 = box_cox(Turnover, 0.5), # sqrt-like transform\n    turnover_lambda1 = box_cox(Turnover, 1),  # no transform\n    turnover_lambdaneg1 = box_cox(Turnover, -1)) |&gt; # inverse transform\n  autoplot(turnover_lambdaneg1)\n\n\n\n\n\n\n\n\n\nFor the following series, find an appropriate Box-Cox transformation in order to stabilise the variance. Tobacco from aus_production, Economy class passengers between Melbourne and Sydney from ansett, and Pedestrian counts at Southern Cross Station from pedestrian.\n\n\naus_production |&gt; \n   autoplot(Tobacco)\n\nWarning: Removed 24 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n# I dont really think a transformation is needed\n\naus_production |&gt; \n   mutate(\n    tobacco_lambda0 = box_cox(Tobacco, 0), # log-transform\n    tobacco_lambda05 = box_cox(Tobacco, 0.5), # sqrt-like transform\n    tobacco_lambda1 = box_cox(Tobacco, 1),  # no transform\n    tobacco_lambdaneg1 = box_cox(Tobacco, -1)) |&gt; # inverse transform\n  autoplot(tobacco_lambdaneg1)\n\nWarning: Removed 24 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\nlambda&lt;-aus_production |&gt; \n  features(Tobacco, features = guerrero) |&gt; \n  pull(lambda_guerrero)\n\naus_production |&gt; \n  autoplot(box_cox(Tobacco, lambda))+\n  labs(y = \"\", title = latex2exp::TeX(paste0(\"Transformed Tobacco with $\\\\lambda$ = \", round(lambda,2)))) \n\nWarning: Removed 24 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n# Lambda is very close to 1, which may confirm that a transformation is not needed\n\n\nansett.df&lt;-ansett |&gt; \n  filter(Airports == \"MEL-SYD\") |&gt; \n  filter(Class == \"Economy\") \n\n# There are some 0s in the data so, we cannont\n\nansett |&gt; \n  filter(Airports == \"MEL-SYD\") |&gt; \n  filter(Class == \"Economy\") |&gt; \n  autoplot(Passengers)\n\n\n\n\n\n\n\nlambda&lt;-ansett |&gt; \n  filter(Airports == \"MEL-SYD\") |&gt; \n  filter(Class == \"Economy\") |&gt; \n  features(Passengers, features = guerrero) |&gt; \n  pull(lambda_guerrero)\n\nansett |&gt; \n  filter(Airports == \"MEL-SYD\") |&gt; \n  filter(Class == \"Economy\") |&gt;\n  autoplot(box_cox(Passengers, lambda))+\n  labs(y = \"\", title = latex2exp::TeX(paste0(\"Transformed Passengers with $\\\\lambda$ = \", round(lambda,2)))) \n\n\n\n\n\n\n\nansett |&gt; \n  filter(Airports == \"MEL-SYD\") |&gt; \n  filter(Class == \"Economy\") |&gt;\n   mutate(\n    passengers_lambda0 = box_cox(Passengers, 0), # log-transform\n    passengers_lambda05 = box_cox(Passengers, 0.5), # sqrt-like transform\n    passengers_lambda1 = box_cox(Passengers, 1),  # no transform\n    passengers_lambdaneg1 = box_cox(Passengers, -1)) |&gt; # inverse transform\n  autoplot(passengers_lambda05)\n\n\n\n\n\n\n\n\n\npedestrian |&gt; \n  filter(Sensor == \"Southern Cross Station\") |&gt; \n  autoplot(Count)\n\n\n\n\n\n\n\n# Lots of zeros, perhaps a log transformation\n\npedestrian |&gt; \n  filter(Sensor == \"Southern Cross Station\") |&gt; \n  autoplot(log(Count))\n\n\n\n\n\n\n\nlambda&lt;-pedestrian |&gt; \n  filter(Sensor == \"Southern Cross Station\") |&gt; \n  features(Count, features = guerrero) |&gt; \n  pull(lambda_guerrero)\n\npedestrian |&gt; \n  filter(Sensor == \"Southern Cross Station\") |&gt; \n  autoplot(box_cox(Count, lambda))+\n  labs(y = \"\", title = latex2exp::TeX(paste0(\"Transformed Count with $\\\\lambda$ = \", round(lambda,2)))) \n\n\n\n\n\n\n\n\n\nShow that a 3×5 MA is equivalent to a 7-term weighted moving average with weights of 0.067, 0.133, 0.200, 0.200, 0.200, 0.133, and 0.067.\n\n\n# In notebook\n\nglobal_economy |&gt; \n  filter(Country == \"Australia\") |&gt; \n  autoplot(Exports)+\n  labs(y=\"% of GDP\", title=\"Total Australian Exports\")\n\n\n\n\n\n\n\naus_exports &lt;- global_economy |&gt;\n  filter(Country == \"Australia\") |&gt;\n  mutate(\n    `5-MA` = slider::slide_dbl(Exports, mean,\n                .before = 2, .after = 2, .complete = TRUE),\n    `3x5-MA` = slider::slide_dbl(`5-MA`, mean,\n                .before = 1, .after = 1, .complete = TRUE))\naus_exports |&gt; \n  autoplot(Exports) +\n  geom_line(aes(y = `5-MA`), colour = \"purple\") +\n  geom_line(aes(y = `3x5-MA`), colour = \"orange\") +\n  labs(y = \"% of GDP\",\n       title = \"Total Australian exports\")\n\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\nConsider the last five years of the Gas data from aus_production.\n\n\ngas &lt;- tail(aus_production, 5*4) |&gt; select(Gas)\n\n# Plot the time series. Can you identify seasonal fluctuations and/or a trend-cycle?\ngas |&gt; \n  autoplot(Gas)\n\n\n\n\n\n\n\ngas |&gt; \n  gg_season(Gas)\n\n\n\n\n\n\n\ngas |&gt; \n  gg_subseries(Gas)\n\n\n\n\n\n\n\n# It looks like there is an upward trend and some seasonality, gas dips during Q1 and Q4 and is highest at during Q3\n\n# Use classical_decomposition with type=multiplicative to calculate the trend-cycle and seasonal indices.\n# Do the results support the graphical interpretation from part a?\ngas |&gt; \n  model(\n    classical_decomposition(Gas, type = \"multiplicative\")) |&gt; \n  components() |&gt; \n  autoplot()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n# Yes, results support my graphical interpretation!\n\n# Compute and plot the seasonally adjusted data.\ngas |&gt; \n  model(\n    STL(Gas ~ trend (window = 21)+\n          season(window = \"periodic\"))) |&gt; \n  components() |&gt; \n  autoplot()\n\n\n\n\n\n\n\n# Change one observation to be an outlier (e.g., add 300 to one observation), and recompute the seasonally adjusted data. What is the effect of the outlier?\ngas[15,1] = 500\n\ngas |&gt; \n  model(\n    STL(Gas ~ trend (window = 21)+\n          season(window = \"periodic\"))) |&gt; \n  components() |&gt; \n  autoplot()\n\n\n\n\n\n\n\n# The outlier changes seasonal cycle, using the robust function we can get it back.\n\ngas |&gt; \n  model(\n    STL(Gas ~ trend (window = 21)+\n          season(window = \"periodic\"),\n        robust = TRUE)) |&gt; \n  components() |&gt; \n  autoplot()\n\n\n\n\n\n\n\ngas[20,1] = 500\n\ngas |&gt; \n  model(\n    STL(Gas ~ trend (window = 21)+\n          season(window = \"periodic\"))) |&gt; \n  components() |&gt; \n  autoplot()\n\n\n\n\n\n\n\n# Having it at the end makes the seasonality look a little more normal, but then messes with the trend\n\n\nRecall your retail time series data (from Exercise 7 in Section 2.10). Decompose the series using X-11. Does it reveal any outliers, or unusual features that you had not noticed previously?\n\n\nlibrary(\"seasonal\")\n\n\nAttaching package: 'seasonal'\n\n\nThe following object is masked from 'package:tibble':\n\n    view\n\nx11_dcmp_myseries &lt;- myseries |&gt;\n  model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |&gt;\n  components()\n\nautoplot(x11_dcmp_myseries) +\n  labs(title =\n    \"Decomposition of Turnover using X-11.\")\n\n\n\n\n\n\n\n# There are some outliers before Jan 2000 that perhaps I would not have noticed with out this decomposition\n\n\nFigures 3.19 and 3.20 show the result of decomposing the number of persons in the civilian labour force in Australia each month from February 1978 to August 1995.\n\n\n\nThere is an obvious increasing trend. Seasonality exists but at a very small scale when compared to other components of the time series. Seasonal trends are inconsistent. There are a few outliers following Jan 1990, due to the recession.\n\n\n\nThis exercise uses the canadian_gas data (monthly Canadian gas production in billions of cubic metres, January 1960 – February 2005).\n\n\ncanadian_gas\n\n# A tsibble: 542 x 2 [1M]\n      Month Volume\n      &lt;mth&gt;  &lt;dbl&gt;\n 1 1960 Jan  1.43 \n 2 1960 Feb  1.31 \n 3 1960 Mar  1.40 \n 4 1960 Apr  1.17 \n 5 1960 May  1.12 \n 6 1960 Jun  1.01 \n 7 1960 Jul  0.966\n 8 1960 Aug  0.977\n 9 1960 Sep  1.03 \n10 1960 Oct  1.25 \n# ℹ 532 more rows\n\n# Plot the data using autoplot(), gg_subseries() and gg_season() to look at the effect of the changing seasonality over time.\ncanadian_gas |&gt; \n  autoplot()\n\nPlot variable not specified, automatically selected `.vars = Volume`\n\n\n\n\n\n\n\n\ncanadian_gas |&gt; \n  gg_season()\n\nPlot variable not specified, automatically selected `y = Volume`\n\n\n\n\n\n\n\n\ncanadian_gas |&gt; \n  gg_subseries()\n\nPlot variable not specified, automatically selected `y = Volume`\n\n\n\n\n\n\n\n\n# Seasonality see to be most apparent in the 1970s, still some but more variation throughout the year\n\n# Do an STL decomposition of the data. You will need to choose a seasonal window to allow for the changing shape of the seasonal component.\ncanadian_gas |&gt; \n  model(\n    STL(Volume ~ trend (window = 21)+\n          season(window = 10))) |&gt; \n  components() |&gt; \n  autoplot()\n\n\n\n\n\n\n\n# How does the seasonal shape change over time? [Hint: Try plotting the seasonal component using.\n# There is greater seasonality from 1970-200"
  },
  {
    "objectID": "fall_2025/meeting_notes/chapter1_Drew.html",
    "href": "fall_2025/meeting_notes/chapter1_Drew.html",
    "title": "chapter1_Drew",
    "section": "",
    "text": "Chapter 1: Getting Started with Forecasting\n\nGingko idea – for end of the meetings?\nFirst 10 min – Q&A, and then go into running htrough exercises\nFor the future: NERRS/NEON dataset\nShould we schedule out a NERRS forecast hackathon with the lab?"
  },
  {
    "objectID": "fall_2025/index.html",
    "href": "fall_2025/index.html",
    "title": "Fall 2025 Forecasting Workshop",
    "section": "",
    "text": "QMEL Fall 2025 Forecasting Course Schedule\n\n\nDate\nChapter\nDiscussion Leader\nNote Link\n\n\n\n\n09/02/2025\n1 - Getting Started\nDrew\nInitial meeting and chapter 1 notes\n\n\n09/16/2025\n2, 3 - Graphics and Decomposition\nJannine\n\n\n\n09/30/2025\n5 - Forecast Toolbox\nKaila\n\n\n\n10/14/2025\n7 - Time Series Regression Models\nMiguel\n\n\n\n10/28/2025\n8 - Exponential Smoothing\nDrew\n\n\n\n11/11/2025\n9 - ARIMA\n\n\n\n\n11/25/2025\n10 - Dynamic Regression Models\nSelina\n\n\n\n12/9/2025\nSchedule Spring Work\nJannine\n\n\n\n\nDiscussion Leader Role: Commit to reading the chapter in depth, give a bit of summary or show a slide or two / come with some discussion, question/answer at the start of meeting, think about applying this to your own data/data examples. The rest of the meeting will be spent working through exercises together and discussing"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#what-did-we-learn-from-chapter-5",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#what-did-we-learn-from-chapter-5",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "What did we learn from Chapter 5❓",
    "text": "What did we learn from Chapter 5❓\n\nA basic forecasting workflow (5.1)\nSimple modeling techniques (5.2)\nMethods for evaluating residuals from fitted values (5.3-5.4)\nSome prediction interval techniques (5.5)\nMethods for evaluating forecast accuracy (5.6-5.10)\n\nWe’ll review the content by section (starting with 5.1) and discuss relevant exercises as we go.\nBig shoutout to Jannine for leading Week 2 and inspiring this layout &lt;3"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#data-for-exercises",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#data-for-exercises",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "Data for exercises",
    "text": "Data for exercises\nFor all exercises in these notes, I’ll use a time series of fitted and forecasted sea surface temperatures for Monterey Bay National Marine Sanctuary.\n\n\n\n\n\nMonterey Bay National Marine Sanctuary\n\n\n\n\n\n# Access data - I'm happy to share on request\nmb = readRDS(\"Data/Monterey Bay Data for Chapter 5 Exercises\") %&gt;% # Again assumes GitHub repo working directory\n  select(date_flag, mean_value) %&gt;% \n  tsibble(index = date_flag) %&gt;% \n  index_by(month = ~ yearmonth(.)) %&gt;% \n  summarize(monthly_sst = mean(mean_value))\n# Reset themes\ntheme &lt;- theme_set(theme_classic())\n# Plot\nautoplot(mb, monthly_sst) + \n  annotate(\"rect\", fill = \"lightblue\", alpha = 0.5, \n        xmin = yearmonth(371), xmax = yearmonth(731),\n        ymin = -Inf, ymax = Inf)\n\n\n\n\n120 years of sea surface temperature modeled for Monterey Bay National Marine Sanctuary by the Geophysical Fluid Dynamics Laboratory\n\n\n\n# Slice the Monterey Bay data to work with for the rest of the .qmd\nmb = slice(mb, 252:731)\n\nTakeaways about the practice data I’m using:\n\nI’m modeling a model, hehe. I think this is very bad practice :)\nThere is a very long-term trend in the data which won’t be reflected as strongly in the subset of data I’ll use, but I wanted to be able to visually parse the monthly cycles and it’s hard to do that when looking at 120 years."
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#simple-forecasting-methods",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#simple-forecasting-methods",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "Simple forecasting methods:",
    "text": "Simple forecasting methods:\n\nAverage method forecasts all future values as the historical mean value.\nNaive method forecasts all future values as the most recent value.\nSeasonal naive method forecasts all future values as the mean historical value for the given season.\nDrift method calculates a linear “drift” function with a slope equal to the difference between the first observation and the most recent observation. The line defined by the drift function is the forecast."
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "Relevant example:",
    "text": "Relevant example:\nGetting a little ahead of ourselves here but I think it’s good to visualize these basic models and hard to do so without actual forecasting!\n\n# Try different models on Monterey Bay data\nmb_simple_models = mb %&gt;% \n  # Leave out 100 points for testing data (the sliced data includes 479 observations)\n  slice(1:379) %&gt;% \n  # Build seasonal naive, naive, and drift models\n  model(Seasonal_Naive = SNAIVE(monthly_sst), \n        Naive = NAIVE(monthly_sst), \n        Drift = RW(monthly_sst ~ drift()))\n# Forecast\nmb_simple_forecasts = mb_simple_models %&gt;% \n  forecast(h = 100)\n# Plot\nautoplot(mb, monthly_sst) + \n  autolayer(mb_simple_forecasts, level = NULL)\n\n\n\n\nThree basic models forecasted for about eight years of sea surface temperature in Monterey Bay"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.3 Definitions:",
    "text": "5.3 Definitions:\n\nI think of fitted values as forecasts for time stamps for which we already have observations. Is this an accurate definition❓\nResiduals are the differences between observed and fitted values for the same time stamp."
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-1",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-1",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.3 Relevant example:",
    "text": "5.3 Relevant example:\n\n# Create a table of residuals (excluding innovation residuals since we don't get to those until the next section)\nmb_snaive_resids = mb_simple_models[1] %&gt;% \n  augment() %&gt;% select(-.innov)\n# Print out residuals (excluding the first few which are NAs)\nmb_snaive_resids[13:379,]\n\n# A tsibble: 367 x 5 [1M]\n# Key:       .model [1]\n   .model            month monthly_sst .fitted .resid\n   &lt;chr&gt;             &lt;mth&gt;       &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n 1 Seasonal_Naive 2001 Dec        11.9    13.5 -1.58 \n 2 Seasonal_Naive 2002 Jan        12.7    14.3 -1.57 \n 3 Seasonal_Naive 2002 Feb        12.8    13.3 -0.487\n 4 Seasonal_Naive 2002 Mar        12.4    13.4 -1.01 \n 5 Seasonal_Naive 2002 Apr        12.5    14.0 -1.58 \n 6 Seasonal_Naive 2002 May        13.1    15.2 -2.12 \n 7 Seasonal_Naive 2002 Jun        13.9    14.1 -0.179\n 8 Seasonal_Naive 2002 Jul        15.2    16.7 -1.56 \n 9 Seasonal_Naive 2002 Aug        15.4    16.8 -1.41 \n10 Seasonal_Naive 2002 Sep        15.8    16.0 -0.179\n# ℹ 357 more rows"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-1",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-1",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.4 Definitions:",
    "text": "5.4 Definitions:\n\nInnovation residuals are residuals of transformed forecasts\n\nEvaluating residuals:\n\nFirst and foremost, residuals should be uncorrelated with a zero mean. It’s best for them also to have constant variance and a normal distribution. Why are these things important❓\nWe learned about two “Portmanteau” tests to measure autocorrelation of residuals:\n\nBox-pierce tests (Q)\nLjung-box tests (Q*)\nFor both tests, we’ll need to set values of l and k\n\nl should be 10 for nonseasonal data or 2m for seasonal data (where m is the period of seasonality)\nk is the number of parameters in the model"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-2",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-2",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.4 Relevant example:",
    "text": "5.4 Relevant example:\n\n# Run a Box-Pierce test on the Monterey Bay seasonal naive model\nmb_snaive_fitted = mb_simple_models[1] %&gt;% \n  fitted() # Get the fitted values\n# Plot the data and fitted values so we can get a visual sense for the narrative here\nautoplot(mb) + autolayer(mb_snaive_fitted, level = NULL, color = \"lightblue\")\n\n\n\n\n\n\n\n# Plot residuals\ngg_tsresiduals(mb_simple_models[1]) + \n  ggtitle(\"Residual diagnostics for the seasonal \n          naive fitted values on the Monterey Bay data\")\n\n\n\n\n\n\n\n# Collect Box Pierce test value\nmb_simple_models[1] %&gt;% augment() %&gt;% \n  features(.innov, box_pierce, l=8) # I set l equal to six because the seasonal cycle is 4\n\n# A tibble: 1 × 3\n  .model         bp_stat bp_pvalue\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n1 Seasonal_Naive    194.         0\n\n\nWhat can we learn from this Box-Pierce test? Did I call it correctly (I mean actually this is a question I have)❓"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-2",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-2",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.5 Definitions:",
    "text": "5.5 Definitions:\n\nPrediction interval is an interval around in which we expect to observe actual values. The size of the prediction interval is determined by what percent of possible outcomes you’d like to cover\n\nOne-step prediction intervals are estimated using the standard deviation from residuals\nBootstrapped prediction intervals are appropriate when we can’t assume that the residuals are normally distributed. Calculated step-by-step by defining the forecast error\nCan anyone articulate the difference between one-step and bootstrapped prediction intervals better than me❓"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-3",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-3",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.5 Relevant example:",
    "text": "5.5 Relevant example:\n\n# Select the drift forecasts\nmb_drift_forecast = filter(mb_simple_forecasts, .model == \"Drift\")\n# Plot with a prediction interval\nautoplot(mb, monthly_sst) + \n  autolayer(mb_drift_forecast, level = 80, alpha = 0.25)\n\n\n\n\n80% prediction interval for a drift model forecast of Monterey Bay data"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-3",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-3",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.6 Definitions:",
    "text": "5.6 Definitions:\n\nBack-transforming is the process of reverting forecasts to the original scale of the data (if the data was transformed before forecasting).\nBias adjustment is required when back-transforming forecasts because back-transforming yields the median rather than the mean (this is called the forecast bias). Why does this happen❓"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#concept",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#concept",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.7 Concept:",
    "text": "5.7 Concept:\nForecasting with additive decomposition can be done simply by forecasting each component separately and then adding them together to generate the recomposed forecast."
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-4",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-4",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.7 Relevant example:",
    "text": "5.7 Relevant example:\n\n# The textbook authors recommend this nested series of functions\nmb_decomp_forecast = mb[1:379,] %&gt;% \n  # \"model()\" defines a model\n  # \"stlf =\" stands for stl forecasting\n  # \"decomposition_model()\" defines a type of decomposed model\n  model(stlf = decomposition_model(\n    # \"STL()\" is the method of decomposition we learned during last session which separates a long-term trend and a seasonal trend from the data\n    STL(monthly_sst ~ trend(), robust = TRUE), \n    # \"STL()\" and \"NAIVE()\" here model two parts of the deomposition\n    NAIVE(season_adjust))) %&gt;% \n  # I think the \"stlf =\" is forecasting the two parts of the model together automatically for us\n  forecast(h = 100)\n\n# For comparison, let's make a basic seasonal naive model\nmb_snaive_forecast = mb_simple_models[1] %&gt;% \n  forecast(h = 100)\n\n# Plot the decomposed and recomposed model in red and the seasonal naive model in blue\nautoplot(mb, monthly_sst) + \n  autolayer(mb_snaive_forecast, level = NULL, color = \"blue\") +\n  autolayer(mb_decomp_forecast, level = NULL, color = \"red\")\n\n\n\n\nSTL decomposition model forecast (red) compared to seasonal naive forecast (red) for the Monterey Bay data\n\n\n\n\nWhat’s going on here❓\nNote on code: To perform an STL decomposition on a time series, we can use either feasts::STL() or stats::stl(). feasts::STL() is recommended by the textbook since it’s part of the package system the textbook authors built but, in my opinion, it’s pretty inflexible and opaque. That said, I’ll use feasts::STL() for the example below since it works with the decomposition_model() parameter the authors ask us to call in the exercises."
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-4",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-4",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.8 Definitions:",
    "text": "5.8 Definitions:\n\nTraining and testing sets are slices of the data used separately to build a model and test its performance.\nForecast errors are essentially residuals calculated over the interval of the testing data. They’re not technically residuals because they don’t describe how the model differs from data on which it was trained; rather, they describe how the model performs in novel situations.\nForecast errors are often scale-dependent, which means they’re calculated on the scale of the data and can’t be compared across datasets.\nSome tests of forecast error include:\n\nMean absolute error (MAE)\nRoot mean squared error (RMSE)\nPercent error is unit-free, so it’s useful for comparing forecast errors between datasets\nScaled errors are an alternative to percent error scaled from the mean absolute error fo the training data. Scaled errors are less than one if the forecast is better than a one-step naive method (we hope it is)!\nWhat are some of the pro’s and con’s of these tests❓"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-5",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#relevant-example-5",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.8 Relevant Example",
    "text": "5.8 Relevant Example\n\n# Compare accuracy scores for forecast errors from the two forecasts generated in the last code chunk\naccuracy(mb_decomp_forecast, mb)\n\n# A tibble: 1 × 10\n  .model .type     ME  RMSE   MAE   MPE  MAPE  MASE RMSSE  ACF1\n  &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 stlf   Test  -0.271  1.04 0.855 -2.42  5.96 0.838 0.780 0.663\n\naccuracy(mb_snaive_forecast, mb)\n\n# A tibble: 1 × 10\n  .model         .type    ME  RMSE   MAE   MPE  MAPE  MASE RMSSE  ACF1\n  &lt;chr&gt;          &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Seasonal_Naive Test  0.190 0.991 0.768 0.916  5.17 0.752 0.745 0.632\n\n\nWhich model performs better here❓"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-5",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definitions-5",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.9 Definitions:",
    "text": "5.9 Definitions:\n\nQuantiles are values under which some percent of observations should fall and over which the rest of the observations should fall.\nPinball loss function gives the likelihood that a value would be observed (I think). This can be interpreted like absolute error… let’s chat about this more in the example.\nWinkler score describes the accuracy of the prediction interval as the length of the prediction interval plus a penalty if an observation falls outside it.\nContinuous ranked probability score (CRPS) evaluates forecast distributions with an average of the quantile scores (lower is better)\nScale-free comparisons compares models. The output is a proportion of how many predictions one model predicted that another didn’t. If you don’t have two models to compare, skill_score() will automatically compare your model to the naive or seasonal naive model.\n\n\n# Plot with a prediction interval\nautoplot(mb, monthly_sst) + \n  autolayer(mb_drift_forecast, level = 80, alpha = 0.25)\n\n\n\n\n\n\n\n# Let's look at some distributional accuracy scores\nmb_simple_forecasts %&gt;% \n  accuracy(mb, list(qs = quantile_score, \n                    winkler = winkler_score, \n                    crps = CRPS, \n                    skill = skill_score(CRPS)), \n           probs = 0.2, level = 80)\n\n# A tibble: 3 × 6\n  .model         .type    qs winkler  crps skill\n  &lt;chr&gt;          &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Drift          Test   2.72   20.9  2.12  -1.66\n2 Naive          Test   2.59   19.4  2.00  -1.50\n3 Seasonal_Naive Test   1.05    7.14 0.797  0   \n\n\nAlright guys what the heck is going on here❓❓❓"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definition",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#definition",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "5.10 Definition:",
    "text": "5.10 Definition:\n\nRolling forecasts draw from different data sources for training and testing datasets. I found the figure in the textbook helpful to understand this method"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#exercise-3",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#exercise-3",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "Exercise 3",
    "text": "Exercise 3\n\n## Exercise 3\n# Access Australian beer data\nrecent_prod = aus_production %&gt;% filter(year(Quarter) &gt;= 1992)\n# Fit a model\nfit = recent_prod %&gt;% model(SNAIVE(Beer))\n# Forecast\nfit %&gt;% forecast() %&gt;% autoplot(recent_prod) + \n  ggtitle(\"Seasonal naive forecast of Australian beer production\")\n\n\n\n\n\n\n\nfit %&gt;% gg_tsresiduals() + # Check if the residuals look like white noise\n  ggtitle(\"Residuals for seasonal naive forecast of Australian beer production\")\n\n\n\n\n\n\n\n\nDo these residuals look like white noise to us❓"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#exercise-6",
    "href": "fall_2025/QMEL Forecasting/Forecasting_Chapter5_Notes.html#exercise-6",
    "title": "Forecasting: Chapter 5 Notes",
    "section": "Exercise 6❓",
    "text": "Exercise 6❓\na. Good forecast methods should have normally distributed residuals.\nb. A model with small residuals will give good forecasts.\nc. The best measure of forecast accuracy is MAPE.\nd. If your model doesn’t forecast well, you should make it more complicated.\ne. Always choose the model with the best forecast accuracy as measured on the test set."
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html",
    "href": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html",
    "title": "QMEL Forecasting Workshop - Wk 2 Time Series Graphics and Decomposition",
    "section": "",
    "text": "Today we will be discussing Chapters 2 and 3 of Foresting: Principles and Practice by Hyndman and Athanasopoulos\nFor those familiar with time series analysis these chapters may be review, but concepts presented here serve as important building blocks for forecasting!\n\n\nFor each chapter:\n\nQuickly review important concepts from the chapter\nUse some of these methods on personal data\nReview chapter exercises\n\nAt the end:\n\nWork on the Ginkgo data set?\n\n\n\n\n\n\n\nUsing the tsibble package and tsibble objects\nDescribing time series data\n\nTrend - A long term increase of decrease in the data. This does not have to be linear, it can sometimes “change directions”.\nSeasonal - A seasonal pattern occurs when a time series is affected by seasonal factors such as the time of year or the day of the week. Seasonality is always of a fixed and known period.\nCyclic - A cycle occurs when the data exhibits rises and falls that are not of a fixed frequency.\nIn general, the average length of cycles is longer than the length of a seasonal pattern and the magnitudes of cycles tend to be more variable than the magnitudes of seasonal patterns.\n\nTypes of plots\n\nTime plots - observations are plotted against the time of observation - autoplot()\nSeasonal plots - data are plotted against the individual “seasons” - gg_season()\nSubseries plots - data for each season are collected together in separate mini time plots - gg_subseries()\nScatter plots - useful for visualizing individual time series, and useful to explore the relationships between time series\nLag plots - shows lagged values of the time series - gg_lag()\nAutocorrelation - measures the linear relationship between lagged values of a time series - ACF()\nWhite noise - time series that have no autocorrelation\n\n\n\n\n\nHere I will use some of these functions to plot temperature data from a kelp forest site that is part of the Santa Barbara Coastal LTER (AQUE).\n\n\n\nFigure:Map of SBC LTER Sites\n\n\nThis data can be found here: https://sbclter.msi.ucsb.edu/data/catalog/package/?package=knb-lter-sbc.13\n\n    # Loading packages\n    library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n    library(tsibble)\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\n    library(here)\n\nhere() starts at C:/Users/drewv/Documents/R/qmel_forecasts\n\n    library(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n    library(feasts)\n\nLoading required package: fabletools\n\n    library(fpp3)\n\n── Attaching packages ──────────────────────────────────────────── fpp3 1.0.1 ──\n✔ tsibbledata 0.4.1     ✔ fable       0.4.1\n── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ──\n✖ purrr::%||%()        masks base::%||%()\n✖ lubridate::date()    masks base::date()\n✖ dplyr::filter()      masks stats::filter()\n✖ tsibble::intersect() masks base::intersect()\n✖ tsibble::interval()  masks lubridate::interval()\n✖ dplyr::lag()         masks stats::lag()\n✖ tsibble::setdiff()   masks base::setdiff()\n✖ tsibble::union()     masks base::union()\n\n    # Loading data\n    sbc_temp&lt;-read_csv(\"C:/Users/drewv/OneDrive - USNH/Documents/Teaching/forecasting/Bottom_temp_all_years_20250128.csv\") |&gt; \n      filter(SITE %in% c(\"AQUE\")) |&gt; \n      select(SITE, DATE_LOCAL, TIME_LOCAL, TEMP_C) \n\nRows: 13559758 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): SITE\ndbl  (2): SERIAL, TEMP_C\ndate (1): DATE_LOCAL\ntime (1): TIME_LOCAL\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n    # Adjust column names\n    sbc_temp&lt;-clean_names(sbc_temp)\n    \n    # Calculate Daily Summaries\n    daily_aque_temp&lt;-sbc_temp |&gt; \n      group_by(date_local) |&gt; \n      summarise(mean_temp_c = mean(temp_c))\n\n    # Converting daily summary df to a tsibble object\n    daily_aque_temp&lt;-daily_aque_temp |&gt; \n      mutate(date_local = as_date(date_local)) |&gt; \n      as_tsibble(index = date_local) |&gt; \n      fill_gaps()\n    \n    # Plotting Data\n    daily_aque_temp |&gt; \n      autoplot(mean_temp_c)\n\n\n\n\n\n\n\n    daily_aque_temp |&gt; \n      gg_season(mean_temp_c)\n\n\n\n\n\n\n\n    daily_aque_temp |&gt;\n      ACF(mean_temp_c) |&gt; autoplot()\n\n\n\n\n\n\n\n    # Calculate Monthly Summaries\n    monthly_aque_temp&lt;-sbc_temp |&gt; \n      mutate(month = month(date_local)) |&gt; \n      mutate(year = year(date_local)) |&gt; \n      group_by(year, month) |&gt; \n      summarise(mean_temp = mean(temp_c)) |&gt; \n      unite(monthyear, year, month, sep = \" \") |&gt; \n      mutate(monthyear = yearmonth(monthyear)) |&gt; \n      as_tsibble(index = monthyear) |&gt; \n      filter(monthyear &gt;= yearmonth(\"2003 Aug\"))\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n    monthly_aque_temp |&gt; \n      autoplot(mean_temp)\n\n\n\n\n\n\n\n    monthly_aque_temp|&gt; \n     gg_season(mean_temp)\n\n\n\n\n\n\n\n   monthly_aque_temp|&gt; \n      gg_subseries(mean_temp)\n\n\n\n\n\n\n\n    monthly_aque_temp |&gt; \n     gg_lag(mean_temp)\n\n\n\n\n\n\n\n    monthly_aque_temp |&gt;\n      ACF(mean_temp) |&gt; autoplot()\n\n\n\n\n\n\n\n\nWhat are some are some observations that we can make from these plots? How might these methods help you better understand your data?\n\n\n\n\n\nMonthly Australian retail data is provided in aus_retail. Select one of the time series as follows (but choose your own seed value):\n\n\naus_retail\n\n# A tsibble: 64,532 x 5 [1M]\n# Key:       State, Industry [152]\n   State                        Industry           `Series ID`    Month Turnover\n   &lt;chr&gt;                        &lt;chr&gt;              &lt;chr&gt;          &lt;mth&gt;    &lt;dbl&gt;\n 1 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Apr      4.4\n 2 Australian Capital Territory Cafes, restaurant… A3349849A   1982 May      3.4\n 3 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Jun      3.6\n 4 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Jul      4  \n 5 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Aug      3.6\n 6 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Sep      4.2\n 7 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Oct      4.8\n 8 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Nov      5.4\n 9 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Dec      6.9\n10 Australian Capital Territory Cafes, restaurant… A3349849A   1983 Jan      3.8\n# ℹ 64,522 more rows\n\nset.seed(12345678)\nmyseries &lt;- aus_retail |&gt;\n  filter(`Series ID` == sample(aus_retail$`Series ID`,1))\n\nset.seed(818)\nmyseries &lt;- aus_retail |&gt;\n  filter(`Series ID` == sample(aus_retail$`Series ID`,1))\n# Other specialized food retailing\n\nmyseries |&gt; \n  autoplot(Turnover)\n\n\n\n\n\n\n\n# I see an obviously increasing trend and maybe cyclicity, but there is not any obvious seasonality. \nmyseries |&gt; \n  gg_season(Turnover)\n\n\n\n\n\n\n\n# Again not seeing a seasonality, but there is increased variability in the later years.\n\nmyseries |&gt; \n  gg_subseries(Turnover)\n\n\n\n\n\n\n\n# Only seasonality is just a small uptick in December maybe related to more shopping during the holidays. There turnover for these items reached their peak in early 2000's, but then decreased.\n\nmyseries |&gt; \n  gg_lag(Turnover)\n\n\n\n\n\n\n\nmyseries |&gt;\n  ACF(Turnover) |&gt; autoplot()\n\n\n\n\n\n\n\n# Just annual cycles?\n\n\n\n\n\n\n\nWe can think of a time series as comprising three components: a trend-cycle component, a seasonal component, and a remainder component (containing anything else in the time series). This chapter explores common methods for extracting these components from a time series. This can help us better understand the time series, but also improve forecasting accuracy. Before decomposition, transformation is sometimes needed, so we will touch on that too!\n\nTypes of transformation:\n\nCalendar adjustments\nPopulation adjustments\nInflation adjustments\nMathematical transformations - When variation in the data changes throughout the time series, transformations can be helpful.\n\nlog transformation\npower transformation\nBox-Cox transformations - includes both logarithms and power transformations.\n\n\nTime series components - trend, season, and remainder\nMoving averages - the first step in classical decomposition methods\nMethods for decomposition\n\nClassical decomposition (additive and multiplicative)\n\nWidely used, but not recommended. Issues include the loss of the first and last few observations when estimating the trend cycle. Trend-cycle estimate tends to over-smooth data. Assumes that the seasonal component repeats from year to year. Not very good at dealing with “unusual” values.\n\nX-11\n\nIncludes extra steps to overcome some of the shortfalls of classical decomposition, which include the end points, and the seasonal component is allowed to vary slowly over time. Methods for both additive and multiplicative decomposition. Robust to outliers.\n\nSEATS\nSTL - Seasonal and Trend decomposition using Loess\n\nCan handle any type of seasonality. The trend-cycle can also be controlled by the user. Robust to outliers\n\n\n\n\n\n\n# Moving average \nmonthly_aque_temp |&gt; \n  mutate(\n    `7-MA` = slider::slide_dbl(mean_temp, mean,\n                .before = 3, .after = 3, .complete = TRUE)) |&gt; \n  autoplot(mean_temp) +\n  geom_line(aes(y = `7-MA`), colour = \"purple\")\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n# Decomposing the time series\ndcmp&lt;-monthly_aque_temp |&gt; \n  model(stl = STL(mean_temp))\n\n# Looking at the different compnents\ncomponents(dcmp) |&gt; autoplot()\n\n\n\n\n\n\n\ncomponents(dcmp) |&gt; \nas_tsibble() |&gt;\n  autoplot(mean_temp, colour=\"gray\") +\n  geom_line(aes(y=trend), colour = \"purple\") +\n  labs(\n    y = \"Mean Monthly Temp (C)\",\n    title = \"Benthic Temperature at AQUE Kelp Forest Site\")\n\n\n\n\n\n\n\n# Seasonally adjusted time series - contains the remainder and trend\ncomponents(dcmp) |&gt;\n  as_tsibble() |&gt;\n  autoplot(mean_temp, colour = \"gray\") +\n  geom_line(aes(y=season_adjust), colour = \"#0072B2\") +\n  labs(y = \"Mean Monthly Temp (C)\",\n       title = \"Benthic Temperature at AQUE Kelp Forest Site\")\n\n\n\n\n\n\n\n\n\n\n\n\nAny exercises that y’all are interested in?"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#overview",
    "href": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#overview",
    "title": "QMEL Forecasting Workshop - Wk 2 Time Series Graphics and Decomposition",
    "section": "",
    "text": "For each chapter:\n\nQuickly review important concepts from the chapter\nUse some of these methods on personal data\nReview chapter exercises\n\nAt the end:\n\nWork on the Ginkgo data set?"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#chapter-2---time-series-graphics",
    "href": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#chapter-2---time-series-graphics",
    "title": "QMEL Forecasting Workshop - Wk 2 Time Series Graphics and Decomposition",
    "section": "",
    "text": "Using the tsibble package and tsibble objects\nDescribing time series data\n\nTrend - A long term increase of decrease in the data. This does not have to be linear, it can sometimes “change directions”.\nSeasonal - A seasonal pattern occurs when a time series is affected by seasonal factors such as the time of year or the day of the week. Seasonality is always of a fixed and known period.\nCyclic - A cycle occurs when the data exhibits rises and falls that are not of a fixed frequency.\nIn general, the average length of cycles is longer than the length of a seasonal pattern and the magnitudes of cycles tend to be more variable than the magnitudes of seasonal patterns.\n\nTypes of plots\n\nTime plots - observations are plotted against the time of observation - autoplot()\nSeasonal plots - data are plotted against the individual “seasons” - gg_season()\nSubseries plots - data for each season are collected together in separate mini time plots - gg_subseries()\nScatter plots - useful for visualizing individual time series, and useful to explore the relationships between time series\nLag plots - shows lagged values of the time series - gg_lag()\nAutocorrelation - measures the linear relationship between lagged values of a time series - ACF()\nWhite noise - time series that have no autocorrelation\n\n\n\n\n\nHere I will use some of these functions to plot temperature data from a kelp forest site that is part of the Santa Barbara Coastal LTER (AQUE).\n\n\n\nFigure:Map of SBC LTER Sites\n\n\nThis data can be found here: https://sbclter.msi.ucsb.edu/data/catalog/package/?package=knb-lter-sbc.13\n\n    # Loading packages\n    library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n    library(tsibble)\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\n    library(here)\n\nhere() starts at C:/Users/drewv/Documents/R/qmel_forecasts\n\n    library(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n    library(feasts)\n\nLoading required package: fabletools\n\n    library(fpp3)\n\n── Attaching packages ──────────────────────────────────────────── fpp3 1.0.1 ──\n✔ tsibbledata 0.4.1     ✔ fable       0.4.1\n── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ──\n✖ purrr::%||%()        masks base::%||%()\n✖ lubridate::date()    masks base::date()\n✖ dplyr::filter()      masks stats::filter()\n✖ tsibble::intersect() masks base::intersect()\n✖ tsibble::interval()  masks lubridate::interval()\n✖ dplyr::lag()         masks stats::lag()\n✖ tsibble::setdiff()   masks base::setdiff()\n✖ tsibble::union()     masks base::union()\n\n    # Loading data\n    sbc_temp&lt;-read_csv(\"C:/Users/drewv/OneDrive - USNH/Documents/Teaching/forecasting/Bottom_temp_all_years_20250128.csv\") |&gt; \n      filter(SITE %in% c(\"AQUE\")) |&gt; \n      select(SITE, DATE_LOCAL, TIME_LOCAL, TEMP_C) \n\nRows: 13559758 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): SITE\ndbl  (2): SERIAL, TEMP_C\ndate (1): DATE_LOCAL\ntime (1): TIME_LOCAL\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n    # Adjust column names\n    sbc_temp&lt;-clean_names(sbc_temp)\n    \n    # Calculate Daily Summaries\n    daily_aque_temp&lt;-sbc_temp |&gt; \n      group_by(date_local) |&gt; \n      summarise(mean_temp_c = mean(temp_c))\n\n    # Converting daily summary df to a tsibble object\n    daily_aque_temp&lt;-daily_aque_temp |&gt; \n      mutate(date_local = as_date(date_local)) |&gt; \n      as_tsibble(index = date_local) |&gt; \n      fill_gaps()\n    \n    # Plotting Data\n    daily_aque_temp |&gt; \n      autoplot(mean_temp_c)\n\n\n\n\n\n\n\n    daily_aque_temp |&gt; \n      gg_season(mean_temp_c)\n\n\n\n\n\n\n\n    daily_aque_temp |&gt;\n      ACF(mean_temp_c) |&gt; autoplot()\n\n\n\n\n\n\n\n    # Calculate Monthly Summaries\n    monthly_aque_temp&lt;-sbc_temp |&gt; \n      mutate(month = month(date_local)) |&gt; \n      mutate(year = year(date_local)) |&gt; \n      group_by(year, month) |&gt; \n      summarise(mean_temp = mean(temp_c)) |&gt; \n      unite(monthyear, year, month, sep = \" \") |&gt; \n      mutate(monthyear = yearmonth(monthyear)) |&gt; \n      as_tsibble(index = monthyear) |&gt; \n      filter(monthyear &gt;= yearmonth(\"2003 Aug\"))\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n    monthly_aque_temp |&gt; \n      autoplot(mean_temp)\n\n\n\n\n\n\n\n    monthly_aque_temp|&gt; \n     gg_season(mean_temp)\n\n\n\n\n\n\n\n   monthly_aque_temp|&gt; \n      gg_subseries(mean_temp)\n\n\n\n\n\n\n\n    monthly_aque_temp |&gt; \n     gg_lag(mean_temp)\n\n\n\n\n\n\n\n    monthly_aque_temp |&gt;\n      ACF(mean_temp) |&gt; autoplot()\n\n\n\n\n\n\n\n\nWhat are some are some observations that we can make from these plots? How might these methods help you better understand your data?"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#exercises-from-the-text",
    "href": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#exercises-from-the-text",
    "title": "QMEL Forecasting Workshop - Wk 2 Time Series Graphics and Decomposition",
    "section": "",
    "text": "Monthly Australian retail data is provided in aus_retail. Select one of the time series as follows (but choose your own seed value):\n\n\naus_retail\n\n# A tsibble: 64,532 x 5 [1M]\n# Key:       State, Industry [152]\n   State                        Industry           `Series ID`    Month Turnover\n   &lt;chr&gt;                        &lt;chr&gt;              &lt;chr&gt;          &lt;mth&gt;    &lt;dbl&gt;\n 1 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Apr      4.4\n 2 Australian Capital Territory Cafes, restaurant… A3349849A   1982 May      3.4\n 3 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Jun      3.6\n 4 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Jul      4  \n 5 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Aug      3.6\n 6 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Sep      4.2\n 7 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Oct      4.8\n 8 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Nov      5.4\n 9 Australian Capital Territory Cafes, restaurant… A3349849A   1982 Dec      6.9\n10 Australian Capital Territory Cafes, restaurant… A3349849A   1983 Jan      3.8\n# ℹ 64,522 more rows\n\nset.seed(12345678)\nmyseries &lt;- aus_retail |&gt;\n  filter(`Series ID` == sample(aus_retail$`Series ID`,1))\n\nset.seed(818)\nmyseries &lt;- aus_retail |&gt;\n  filter(`Series ID` == sample(aus_retail$`Series ID`,1))\n# Other specialized food retailing\n\nmyseries |&gt; \n  autoplot(Turnover)\n\n\n\n\n\n\n\n# I see an obviously increasing trend and maybe cyclicity, but there is not any obvious seasonality. \nmyseries |&gt; \n  gg_season(Turnover)\n\n\n\n\n\n\n\n# Again not seeing a seasonality, but there is increased variability in the later years.\n\nmyseries |&gt; \n  gg_subseries(Turnover)\n\n\n\n\n\n\n\n# Only seasonality is just a small uptick in December maybe related to more shopping during the holidays. There turnover for these items reached their peak in early 2000's, but then decreased.\n\nmyseries |&gt; \n  gg_lag(Turnover)\n\n\n\n\n\n\n\nmyseries |&gt;\n  ACF(Turnover) |&gt; autoplot()\n\n\n\n\n\n\n\n# Just annual cycles?"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#notes-from-the-chapter-1",
    "href": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#notes-from-the-chapter-1",
    "title": "QMEL Forecasting Workshop - Wk 2 Time Series Graphics and Decomposition",
    "section": "",
    "text": "We can think of a time series as comprising three components: a trend-cycle component, a seasonal component, and a remainder component (containing anything else in the time series). This chapter explores common methods for extracting these components from a time series. This can help us better understand the time series, but also improve forecasting accuracy. Before decomposition, transformation is sometimes needed, so we will touch on that too!\n\nTypes of transformation:\n\nCalendar adjustments\nPopulation adjustments\nInflation adjustments\nMathematical transformations - When variation in the data changes throughout the time series, transformations can be helpful.\n\nlog transformation\npower transformation\nBox-Cox transformations - includes both logarithms and power transformations.\n\n\nTime series components - trend, season, and remainder\nMoving averages - the first step in classical decomposition methods\nMethods for decomposition\n\nClassical decomposition (additive and multiplicative)\n\nWidely used, but not recommended. Issues include the loss of the first and last few observations when estimating the trend cycle. Trend-cycle estimate tends to over-smooth data. Assumes that the seasonal component repeats from year to year. Not very good at dealing with “unusual” values.\n\nX-11\n\nIncludes extra steps to overcome some of the shortfalls of classical decomposition, which include the end points, and the seasonal component is allowed to vary slowly over time. Methods for both additive and multiplicative decomposition. Robust to outliers.\n\nSEATS\nSTL - Seasonal and Trend decomposition using Loess\n\nCan handle any type of seasonality. The trend-cycle can also be controlled by the user. Robust to outliers\n\n\n\n\n\n\n# Moving average \nmonthly_aque_temp |&gt; \n  mutate(\n    `7-MA` = slider::slide_dbl(mean_temp, mean,\n                .before = 3, .after = 3, .complete = TRUE)) |&gt; \n  autoplot(mean_temp) +\n  geom_line(aes(y = `7-MA`), colour = \"purple\")\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n# Decomposing the time series\ndcmp&lt;-monthly_aque_temp |&gt; \n  model(stl = STL(mean_temp))\n\n# Looking at the different compnents\ncomponents(dcmp) |&gt; autoplot()\n\n\n\n\n\n\n\ncomponents(dcmp) |&gt; \nas_tsibble() |&gt;\n  autoplot(mean_temp, colour=\"gray\") +\n  geom_line(aes(y=trend), colour = \"purple\") +\n  labs(\n    y = \"Mean Monthly Temp (C)\",\n    title = \"Benthic Temperature at AQUE Kelp Forest Site\")\n\n\n\n\n\n\n\n# Seasonally adjusted time series - contains the remainder and trend\ncomponents(dcmp) |&gt;\n  as_tsibble() |&gt;\n  autoplot(mean_temp, colour = \"gray\") +\n  geom_line(aes(y=season_adjust), colour = \"#0072B2\") +\n  labs(y = \"Mean Monthly Temp (C)\",\n       title = \"Benthic Temperature at AQUE Kelp Forest Site\")"
  },
  {
    "objectID": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#exercises",
    "href": "fall_2025/QMEL Forecasting/Wk 2 - Chapter 2 and 3.html#exercises",
    "title": "QMEL Forecasting Workshop - Wk 2 Time Series Graphics and Decomposition",
    "section": "",
    "text": "Any exercises that y’all are interested in?"
  },
  {
    "objectID": "projects/gingko/index.html",
    "href": "projects/gingko/index.html",
    "title": "Gingko Forecasting Project",
    "section": "",
    "text": "This page contains data and scripts for QMEL forecasting of the UNH Gingko drop date!\nAs of 09/16/2025, this is not organized from the last time Drew played around with the gingko data."
  },
  {
    "objectID": "projects/gingko/index.html#gingko-leaf-drop-data",
    "href": "projects/gingko/index.html#gingko-leaf-drop-data",
    "title": "Gingko Forecasting Project",
    "section": "Gingko Leaf Drop Data",
    "text": "Gingko Leaf Drop Data\nDr. Seria Frey (UNH NRES) has been continuing data collection of the UNH Gingko tree leaf drop date, a dataset that has been collected more or less continuously since 1977.\n\nreadRenviron(\".Renviron\")\n\nlibrary(fpp3)\nlibrary(openmeteo)\nlibrary(fabletools)\nlibrary(here)\nlibrary(tidyverse)\nlibrary(leaflet)\n\ngingko_dat&lt;-read.csv(\"data/gingko.csv\")\n          \n\n\ngingko&lt;-tsibble(gingko_dat,index=Year)\ngingko&lt;-tsibble::fill_gaps(gingko)\n\n#plot\ngingko |&gt;\n  autoplot(Julian.day) +\n  labs(y=\"Julian Day\",x=\"Year\")+\n  stat_smooth(method=\"lm\") +\n  geom_point()\n\n\n\n\n\n\n\ngingko |&gt;\n  gg_lag(Julian.day,geom=\"point\")\n\n\n\n\n\n\n\ngingko |&gt;\n  ACF(Julian.day,lag_max = 47) |&gt;\n  autoplot()"
  },
  {
    "objectID": "projects/gingko/index.html#meteo-data-exploration",
    "href": "projects/gingko/index.html#meteo-data-exploration",
    "title": "Gingko Forecasting Project",
    "section": "Meteo Data Exploration",
    "text": "Meteo Data Exploration\nA quick investigation into whether ERA5/Openmeteo data and weather station data are correlated, and if there is a link with leaf drop date\n\n\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "projects/gingko/index.html#wip---era5-data-extraction-with-mcera5",
    "href": "projects/gingko/index.html#wip---era5-data-extraction-with-mcera5",
    "title": "Gingko Forecasting Project",
    "section": "WIP - ERA5 Data Extraction with mcera5",
    "text": "WIP - ERA5 Data Extraction with mcera5\n\n#######################\n#era5\nlibrary(mcera5,attach.required=T)\nlibrary(ecmwfr)\nlibrary(microclima)\nlibrary(NicheMapR)\nlibrary(devtools)\nlibrary(tidyverse)\nlibrary(ncdf4)\nlibrary(curl)\nlibrary(keyring)\nlibrary(abind)\nlibrary(lubridate)\nlibrary(tidync)\n\n#my tokens are secret - you will need to get your own, see vignette for mcera5\nvignette(\"mcera5_vignette\", package = \"mcera5\")\nuid &lt;- Sys.getenv(\"uid\")\ncds_access_token &lt;- Sys.getenv(\"cds_access_token\")\n\n\necmwfr::wf_set_key(user = uid,\n                   key = cds_access_token)\n\ndurham_coords&lt;-c(43.136722, -70.934333)\nxmn &lt;- durham_coords[2]\nxmx &lt;- durham_coords[2]\nymn &lt;- durham_coords[1]\nymx &lt;- durham_coords[1]\n\n# temporal extent\nst_time &lt;- as.POSIXlt(\"2023-01-01 00:00\", tz = \"UTC\")\nen_time &lt;- as.POSIXlt(\"2023-12-01 23:00\",  tz = \"UTC\")\n\n\n# Set a unique prefix for the filename (here based on spatial\n# coordinates), and the file path for downloaded .nc files\nfile_prefix &lt;- \"era5_durham\"\nfile_path &lt;- \"projects/gingko/data/era_data\"\n\n\n# build a request (covering multiple years)\nreq &lt;- build_era5_request(xmin = xmn, xmax = xmx, \n                          ymin = ymn, ymax = ymx,\n                          start_time = st_time,\n                          end_time = en_time,\n                          outfile_name = file_prefix)"
  }
]